<?php
/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ordersAuthorize' => [
            'application/json',
        ],
        'ordersCapture' => [
            'application/json',
        ],
        'ordersConfirm' => [
            'application/json',
        ],
        'ordersCreate' => [
            'application/json',
        ],
        'ordersGet' => [
            'application/json',
        ],
        'ordersPatch' => [
            'application/json',
        ],
        'ordersTrackCreate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ordersAuthorize
     *
     * Authorize payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderAuthorizeRequest $order_authorize_request order_authorize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersAuthorize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderAuthorizeResponse|\OpenAPI\Client\Model\OrderAuthorizeResponse|\OpenAPI\Client\Model\OrdersAuthorize400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersAuthorize403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersAuthorize422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersAuthorize($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_authorize_request = null, string $contentType = self::contentTypes['ordersAuthorize'][0])
    {
        list($response) = $this->ordersAuthorizeWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_authorize_request, $contentType);
        return $response;
    }

    /**
     * Operation ordersAuthorizeWithHttpInfo
     *
     * Authorize payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderAuthorizeRequest $order_authorize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersAuthorize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderAuthorizeResponse|\OpenAPI\Client\Model\OrderAuthorizeResponse|\OpenAPI\Client\Model\OrdersAuthorize400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersAuthorize403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersAuthorize422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersAuthorizeWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_authorize_request = null, string $contentType = self::contentTypes['ordersAuthorize'][0])
    {
        $request = $this->ordersAuthorizeRequest($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_authorize_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderAuthorizeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderAuthorizeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderAuthorizeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\OrderAuthorizeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderAuthorizeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderAuthorizeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OrdersAuthorize400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersAuthorize400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersAuthorize400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OrdersCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OrdersAuthorize403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersAuthorize403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersAuthorize403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\OrdersGet404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersGet404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersGet404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\OrdersAuthorize422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersAuthorize422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersAuthorize422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error500' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderAuthorizeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderAuthorizeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderAuthorizeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersAuthorize400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersAuthorize403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersGet404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersAuthorize422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersAuthorizeAsync
     *
     * Authorize payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderAuthorizeRequest $order_authorize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersAuthorizeAsync($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_authorize_request = null, string $contentType = self::contentTypes['ordersAuthorize'][0])
    {
        return $this->ordersAuthorizeAsyncWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_authorize_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersAuthorizeAsyncWithHttpInfo
     *
     * Authorize payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderAuthorizeRequest $order_authorize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersAuthorizeAsyncWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_authorize_request = null, string $contentType = self::contentTypes['ordersAuthorize'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderAuthorizeResponse';
        $request = $this->ordersAuthorizeRequest($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_authorize_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersAuthorize'
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderAuthorizeRequest $order_authorize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersAuthorizeRequest($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_authorize_request = null, string $contentType = self::contentTypes['ordersAuthorize'][0])
    {

        // verify the required parameter 'pay_pal_request_id' is set
        if ($pay_pal_request_id === null || (is_array($pay_pal_request_id) && count($pay_pal_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_pal_request_id when calling ordersAuthorize'
            );
        }
        if (strlen($pay_pal_request_id) > 108) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersAuthorize, must be smaller than or equal to 108.');
        }
        if (strlen($pay_pal_request_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersAuthorize, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersAuthorize'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersAuthorize, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersAuthorize, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersAuthorize, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersAuthorize'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersAuthorize, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersAuthorize, must be bigger than or equal to 1.');
        }
        
        if ($prefer !== null && strlen($prefer) > 25) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersAuthorize, must be smaller than or equal to 25.');
        }
        if ($prefer !== null && strlen($prefer) < 1) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersAuthorize, must be bigger than or equal to 1.');
        }
        if ($prefer !== null && !preg_match("/^[a-zA-Z=]*$/", $prefer)) {
            throw new \InvalidArgumentException("invalid value for \"prefer\" when calling OrdersApi.ordersAuthorize, must conform to the pattern /^[a-zA-Z=]*$/.");
        }
        
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersAuthorize, must be smaller than or equal to 36.');
        }
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersAuthorize, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v2/checkout/orders/{id}/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_authorize_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_authorize_request));
            } else {
                $httpBody = $order_authorize_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersCapture
     *
     * Capture payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderCaptureRequest $order_capture_request order_capture_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCapture'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCapture400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersCapture403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersCapture422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersCapture($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_capture_request = null, string $contentType = self::contentTypes['ordersCapture'][0])
    {
        list($response) = $this->ordersCaptureWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_capture_request, $contentType);
        return $response;
    }

    /**
     * Operation ordersCaptureWithHttpInfo
     *
     * Capture payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderCaptureRequest $order_capture_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCapture'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCapture400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersCapture403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersCapture422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersCaptureWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_capture_request = null, string $contentType = self::contentTypes['ordersCapture'][0])
    {
        $request = $this->ordersCaptureRequest($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_capture_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OrdersCapture400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCapture400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCapture400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OrdersCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OrdersCapture403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCapture403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCapture403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\OrdersGet404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersGet404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersGet404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\OrdersCapture422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCapture422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCapture422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error500' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCapture400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCapture403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersGet404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCapture422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersCaptureAsync
     *
     * Capture payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderCaptureRequest $order_capture_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersCaptureAsync($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_capture_request = null, string $contentType = self::contentTypes['ordersCapture'][0])
    {
        return $this->ordersCaptureAsyncWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_capture_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersCaptureAsyncWithHttpInfo
     *
     * Capture payment for order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderCaptureRequest $order_capture_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersCaptureAsyncWithHttpInfo($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_capture_request = null, string $contentType = self::contentTypes['ordersCapture'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->ordersCaptureRequest($pay_pal_request_id, $id, $content_type, $prefer, $pay_pal_client_metadata_id, $pay_pal_auth_assertion, $order_capture_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersCapture'
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  \OpenAPI\Client\Model\OrderCaptureRequest $order_capture_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCapture'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersCaptureRequest($pay_pal_request_id, $id, $content_type, $prefer = 'return=minimal', $pay_pal_client_metadata_id = null, $pay_pal_auth_assertion = null, $order_capture_request = null, string $contentType = self::contentTypes['ordersCapture'][0])
    {

        // verify the required parameter 'pay_pal_request_id' is set
        if ($pay_pal_request_id === null || (is_array($pay_pal_request_id) && count($pay_pal_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_pal_request_id when calling ordersCapture'
            );
        }
        if (strlen($pay_pal_request_id) > 108) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersCapture, must be smaller than or equal to 108.');
        }
        if (strlen($pay_pal_request_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersCapture, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersCapture'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersCapture, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersCapture, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersCapture, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersCapture'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersCapture, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersCapture, must be bigger than or equal to 1.');
        }
        
        if ($prefer !== null && strlen($prefer) > 25) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersCapture, must be smaller than or equal to 25.');
        }
        if ($prefer !== null && strlen($prefer) < 1) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersCapture, must be bigger than or equal to 1.');
        }
        if ($prefer !== null && !preg_match("/^[a-zA-Z=]*$/", $prefer)) {
            throw new \InvalidArgumentException("invalid value for \"prefer\" when calling OrdersApi.ordersCapture, must conform to the pattern /^[a-zA-Z=]*$/.");
        }
        
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersCapture, must be smaller than or equal to 36.');
        }
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersCapture, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v2/checkout/orders/{id}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_capture_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_capture_request));
            } else {
                $httpBody = $order_capture_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersConfirm
     *
     * Confirm the Order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $pay_pal_client_metadata_id pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  \OpenAPI\Client\Model\ConfirmOrderRequest $confirm_order_request confirm_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersConfirm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersConfirm400Response|\OpenAPI\Client\Model\OrdersConfirm403Response|\OpenAPI\Client\Model\OrdersConfirm422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersConfirm($id, $content_type, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', $confirm_order_request = null, string $contentType = self::contentTypes['ordersConfirm'][0])
    {
        list($response) = $this->ordersConfirmWithHttpInfo($id, $content_type, $pay_pal_client_metadata_id, $prefer, $confirm_order_request, $contentType);
        return $response;
    }

    /**
     * Operation ordersConfirmWithHttpInfo
     *
     * Confirm the Order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  \OpenAPI\Client\Model\ConfirmOrderRequest $confirm_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersConfirm'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersConfirm400Response|\OpenAPI\Client\Model\OrdersConfirm403Response|\OpenAPI\Client\Model\OrdersConfirm422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersConfirmWithHttpInfo($id, $content_type, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', $confirm_order_request = null, string $contentType = self::contentTypes['ordersConfirm'][0])
    {
        $request = $this->ordersConfirmRequest($id, $content_type, $pay_pal_client_metadata_id, $prefer, $confirm_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OrdersConfirm400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersConfirm400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersConfirm400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OrdersConfirm403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersConfirm403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersConfirm403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\OrdersConfirm422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersConfirm422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersConfirm422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error500' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersConfirm400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersConfirm403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersConfirm422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersConfirmAsync
     *
     * Confirm the Order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  \OpenAPI\Client\Model\ConfirmOrderRequest $confirm_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersConfirm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersConfirmAsync($id, $content_type, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', $confirm_order_request = null, string $contentType = self::contentTypes['ordersConfirm'][0])
    {
        return $this->ordersConfirmAsyncWithHttpInfo($id, $content_type, $pay_pal_client_metadata_id, $prefer, $confirm_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersConfirmAsyncWithHttpInfo
     *
     * Confirm the Order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  \OpenAPI\Client\Model\ConfirmOrderRequest $confirm_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersConfirm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersConfirmAsyncWithHttpInfo($id, $content_type, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', $confirm_order_request = null, string $contentType = self::contentTypes['ordersConfirm'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->ordersConfirmRequest($id, $content_type, $pay_pal_client_metadata_id, $prefer, $confirm_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersConfirm'
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  \OpenAPI\Client\Model\ConfirmOrderRequest $confirm_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersConfirm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersConfirmRequest($id, $content_type, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', $confirm_order_request = null, string $contentType = self::contentTypes['ordersConfirm'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersConfirm'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersConfirm, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersConfirm, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersConfirm, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersConfirm'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersConfirm, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersConfirm, must be bigger than or equal to 1.');
        }
        
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersConfirm, must be smaller than or equal to 36.');
        }
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersConfirm, must be bigger than or equal to 1.');
        }
        
        if ($prefer !== null && strlen($prefer) > 25) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersConfirm, must be smaller than or equal to 25.');
        }
        if ($prefer !== null && strlen($prefer) < 1) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersConfirm, must be bigger than or equal to 1.');
        }
        if ($prefer !== null && !preg_match("/^[a-zA-Z=]*$/", $prefer)) {
            throw new \InvalidArgumentException("invalid value for \"prefer\" when calling OrdersApi.ordersConfirm, must conform to the pattern /^[a-zA-Z=]*$/.");
        }
        


        $resourcePath = '/v2/checkout/orders/{id}/confirm-payment-source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($confirm_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($confirm_order_request));
            } else {
                $httpBody = $confirm_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersCreate
     *
     * Create order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderRequest $order_request order_request (required)
     * @param  string $pay_pal_partner_attribution_id pay_pal_partner_attribution_id (optional)
     * @param  string $pay_pal_client_metadata_id pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCreate400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersCreate422Response|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersCreate($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id = null, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', string $contentType = self::contentTypes['ordersCreate'][0])
    {
        list($response) = $this->ordersCreateWithHttpInfo($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id, $pay_pal_client_metadata_id, $prefer, $contentType);
        return $response;
    }

    /**
     * Operation ordersCreateWithHttpInfo
     *
     * Create order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderRequest $order_request (required)
     * @param  string $pay_pal_partner_attribution_id (optional)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCreate400Response|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersCreate422Response|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersCreateWithHttpInfo($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id = null, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', string $contentType = self::contentTypes['ordersCreate'][0])
    {
        $request = $this->ordersCreateRequest($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id, $pay_pal_client_metadata_id, $prefer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OrdersCreate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OrdersCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\OrdersCreate422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersCreateAsync
     *
     * Create order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderRequest $order_request (required)
     * @param  string $pay_pal_partner_attribution_id (optional)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersCreateAsync($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id = null, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', string $contentType = self::contentTypes['ordersCreate'][0])
    {
        return $this->ordersCreateAsyncWithHttpInfo($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id, $pay_pal_client_metadata_id, $prefer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersCreateAsyncWithHttpInfo
     *
     * Create order
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderRequest $order_request (required)
     * @param  string $pay_pal_partner_attribution_id (optional)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersCreateAsyncWithHttpInfo($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id = null, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', string $contentType = self::contentTypes['ordersCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->ordersCreateRequest($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id, $pay_pal_client_metadata_id, $prefer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersCreate'
     *
     * @param  string $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderRequest $order_request (required)
     * @param  string $pay_pal_partner_attribution_id (optional)
     * @param  string $pay_pal_client_metadata_id (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'return=minimal')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersCreateRequest($pay_pal_request_id, $content_type, $order_request, $pay_pal_partner_attribution_id = null, $pay_pal_client_metadata_id = null, $prefer = 'return=minimal', string $contentType = self::contentTypes['ordersCreate'][0])
    {

        // verify the required parameter 'pay_pal_request_id' is set
        if ($pay_pal_request_id === null || (is_array($pay_pal_request_id) && count($pay_pal_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_pal_request_id when calling ordersCreate'
            );
        }
        if (strlen($pay_pal_request_id) > 108) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersCreate, must be smaller than or equal to 108.');
        }
        if (strlen($pay_pal_request_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_request_id" when calling OrdersApi.ordersCreate, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersCreate'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersCreate, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersCreate, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'order_request' is set
        if ($order_request === null || (is_array($order_request) && count($order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_request when calling ordersCreate'
            );
        }

        if ($pay_pal_partner_attribution_id !== null && strlen($pay_pal_partner_attribution_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_partner_attribution_id" when calling OrdersApi.ordersCreate, must be smaller than or equal to 36.');
        }
        if ($pay_pal_partner_attribution_id !== null && strlen($pay_pal_partner_attribution_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_partner_attribution_id" when calling OrdersApi.ordersCreate, must be bigger than or equal to 1.');
        }
        
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersCreate, must be smaller than or equal to 36.');
        }
        if ($pay_pal_client_metadata_id !== null && strlen($pay_pal_client_metadata_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pay_pal_client_metadata_id" when calling OrdersApi.ordersCreate, must be bigger than or equal to 1.');
        }
        
        if ($prefer !== null && strlen($prefer) > 25) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersCreate, must be smaller than or equal to 25.');
        }
        if ($prefer !== null && strlen($prefer) < 1) {
            throw new \InvalidArgumentException('invalid length for "$prefer" when calling OrdersApi.ordersCreate, must be bigger than or equal to 1.');
        }
        if ($prefer !== null && !preg_match("/^[a-zA-Z=]*$/", $prefer)) {
            throw new \InvalidArgumentException("invalid value for \"prefer\" when calling OrdersApi.ordersCreate, must conform to the pattern /^[a-zA-Z=]*$/.");
        }
        

        $resourcePath = '/v2/checkout/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_request));
            } else {
                $httpBody = $order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersGet
     *
     * Show order details
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersGet($id, $content_type, $fields = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        list($response) = $this->ordersGetWithHttpInfo($id, $content_type, $fields, $contentType);
        return $response;
    }

    /**
     * Operation ordersGetWithHttpInfo
     *
     * Show order details
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersCreate401Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersGetWithHttpInfo($id, $content_type, $fields = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        $request = $this->ordersGetRequest($id, $content_type, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OrdersCreate401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersCreate401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersCreate401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\OrdersGet404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersGet404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersGet404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersGet404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersGetAsync
     *
     * Show order details
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsync($id, $content_type, $fields = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        return $this->ordersGetAsyncWithHttpInfo($id, $content_type, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersGetAsyncWithHttpInfo
     *
     * Show order details
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsyncWithHttpInfo($id, $content_type, $fields = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->ordersGetRequest($id, $content_type, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersGet'
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  string $fields A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersGetRequest($id, $content_type, $fields = null, string $contentType = self::contentTypes['ordersGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersGet'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersGet, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersGet, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersGet'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersGet, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersGet, must be bigger than or equal to 1.');
        }
        
        if ($fields !== null && !preg_match("/^[a-z_]*$/", $fields)) {
            throw new \InvalidArgumentException("invalid value for \"fields\" when calling OrdersApi.ordersGet, must conform to the pattern /^[a-z_]*$/.");
        }
        

        $resourcePath = '/v2/checkout/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersPatch
     *
     * Update order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\Patch[] $patch patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function ordersPatch($id, $content_type, $patch = null, string $contentType = self::contentTypes['ordersPatch'][0])
    {
        $this->ordersPatchWithHttpInfo($id, $content_type, $patch, $contentType);
    }

    /**
     * Operation ordersPatchWithHttpInfo
     *
     * Update order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\Patch[] $patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersPatchWithHttpInfo($id, $content_type, $patch = null, string $contentType = self::contentTypes['ordersPatch'][0])
    {
        $request = $this->ordersPatchRequest($id, $content_type, $patch, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersPatch400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersCreate401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersGet404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersPatch422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersPatchAsync
     *
     * Update order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\Patch[] $patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPatchAsync($id, $content_type, $patch = null, string $contentType = self::contentTypes['ordersPatch'][0])
    {
        return $this->ordersPatchAsyncWithHttpInfo($id, $content_type, $patch, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersPatchAsyncWithHttpInfo
     *
     * Update order
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\Patch[] $patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPatchAsyncWithHttpInfo($id, $content_type, $patch = null, string $contentType = self::contentTypes['ordersPatch'][0])
    {
        $returnType = '';
        $request = $this->ordersPatchRequest($id, $content_type, $patch, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersPatch'
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\Patch[] $patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersPatchRequest($id, $content_type, $patch = null, string $contentType = self::contentTypes['ordersPatch'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersPatch'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersPatch, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersPatch, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersPatch, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersPatch'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersPatch, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersPatch, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/checkout/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch));
            } else {
                $httpBody = $patch;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersTrackCreate
     *
     * Add tracking information for an Order.
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderTrackerRequest $order_tracker_request order_tracker_request (required)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersTrackCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersTrackCreate400Response|\OpenAPI\Client\Model\OrdersTrackCreate403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersTrackCreate422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault
     */
    public function ordersTrackCreate($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion = null, string $contentType = self::contentTypes['ordersTrackCreate'][0])
    {
        list($response) = $this->ordersTrackCreateWithHttpInfo($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion, $contentType);
        return $response;
    }

    /**
     * Operation ordersTrackCreateWithHttpInfo
     *
     * Add tracking information for an Order.
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderTrackerRequest $order_tracker_request (required)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersTrackCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\Order|\OpenAPI\Client\Model\OrdersTrackCreate400Response|\OpenAPI\Client\Model\OrdersTrackCreate403Response|\OpenAPI\Client\Model\OrdersGet404Response|\OpenAPI\Client\Model\OrdersTrackCreate422Response|\OpenAPI\Client\Model\Error500|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersTrackCreateWithHttpInfo($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion = null, string $contentType = self::contentTypes['ordersTrackCreate'][0])
    {
        $request = $this->ordersTrackCreateRequest($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OrdersTrackCreate400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersTrackCreate400Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersTrackCreate400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OrdersTrackCreate403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersTrackCreate403Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersTrackCreate403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\OrdersGet404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersGet404Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersGet404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\OrdersTrackCreate422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersTrackCreate422Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersTrackCreate422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error500' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersTrackCreate400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersTrackCreate403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersGet404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersTrackCreate422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersTrackCreateAsync
     *
     * Add tracking information for an Order.
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderTrackerRequest $order_tracker_request (required)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersTrackCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersTrackCreateAsync($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion = null, string $contentType = self::contentTypes['ordersTrackCreate'][0])
    {
        return $this->ordersTrackCreateAsyncWithHttpInfo($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersTrackCreateAsyncWithHttpInfo
     *
     * Add tracking information for an Order.
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderTrackerRequest $order_tracker_request (required)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersTrackCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersTrackCreateAsyncWithHttpInfo($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion = null, string $contentType = self::contentTypes['ordersTrackCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->ordersTrackCreateRequest($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersTrackCreate'
     *
     * @param  string $id The ID of the order for which to update payment details. (required)
     * @param  string $content_type The media type. Required for operations with a request body. The value is &#x60;application/&lt;format&gt;&#x60;, where &#x60;format&#x60; is &#x60;json&#x60;. (required)
     * @param  \OpenAPI\Client\Model\OrderTrackerRequest $order_tracker_request (required)
     * @param  string $pay_pal_auth_assertion An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersTrackCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersTrackCreateRequest($id, $content_type, $order_tracker_request, $pay_pal_auth_assertion = null, string $contentType = self::contentTypes['ordersTrackCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling ordersTrackCreate'
            );
        }
        if (strlen($id) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersTrackCreate, must be smaller than or equal to 36.');
        }
        if (strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrdersApi.ordersTrackCreate, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[A-Z0-9]+$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrdersApi.ordersTrackCreate, must conform to the pattern /^[A-Z0-9]+$/.");
        }
        
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling ordersTrackCreate'
            );
        }
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersTrackCreate, must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 1) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling OrdersApi.ordersTrackCreate, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'order_tracker_request' is set
        if ($order_tracker_request === null || (is_array($order_tracker_request) && count($order_tracker_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_tracker_request when calling ordersTrackCreate'
            );
        }



        $resourcePath = '/v2/checkout/orders/{id}/track';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_tracker_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_tracker_request));
            } else {
                $httpBody = $order_tracker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
