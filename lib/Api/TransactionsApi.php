<?php
/**
 * TransactionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction Search
 *
 * Use the Transaction Search API to get the history of transactions for a PayPal account. To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>. For more information about the API, see the <a href=\"/docs/transaction-search/\">Transaction Search API Integration Guide</a>.<blockquote><strong>Note:</strong> To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>.</blockquote>
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchGet
     *
     * List transactions
     *
     * @param  string $start_date Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (required)
     * @param  string $end_date Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (required)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;/docs/api/payments/v1/#definition-order\&quot;&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'transaction_info')
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'Y')
     * @param  int $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 100)
     * @param  int $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchResponse|\OpenAPI\Client\Model\ErrorDefault
     */
    public function searchGet($start_date, $end_date, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $store_id = null, $terminal_id = null, $fields = 'transaction_info', $balance_affecting_records_only = 'Y', $page_size = 100, $page = 1, string $contentType = self::contentTypes['searchGet'][0])
    {
        list($response) = $this->searchGetWithHttpInfo($start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $store_id, $terminal_id, $fields, $balance_affecting_records_only, $page_size, $page, $contentType);
        return $response;
    }

    /**
     * Operation searchGetWithHttpInfo
     *
     * List transactions
     *
     * @param  string $start_date Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (required)
     * @param  string $end_date Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (required)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;/docs/api/payments/v1/#definition-order\&quot;&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'transaction_info')
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'Y')
     * @param  int $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 100)
     * @param  int $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchResponse|\OpenAPI\Client\Model\ErrorDefault, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchGetWithHttpInfo($start_date, $end_date, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $store_id = null, $terminal_id = null, $fields = 'transaction_info', $balance_affecting_records_only = 'Y', $page_size = 100, $page = 1, string $contentType = self::contentTypes['searchGet'][0])
    {
        $request = $this->searchGetRequest($start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $store_id, $terminal_id, $fields, $balance_affecting_records_only, $page_size, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ErrorDefault' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDefault' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDefault', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDefault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchGetAsync
     *
     * List transactions
     *
     * @param  string $start_date Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (required)
     * @param  string $end_date Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (required)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;/docs/api/payments/v1/#definition-order\&quot;&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'transaction_info')
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'Y')
     * @param  int $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 100)
     * @param  int $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGetAsync($start_date, $end_date, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $store_id = null, $terminal_id = null, $fields = 'transaction_info', $balance_affecting_records_only = 'Y', $page_size = 100, $page = 1, string $contentType = self::contentTypes['searchGet'][0])
    {
        return $this->searchGetAsyncWithHttpInfo($start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $store_id, $terminal_id, $fields, $balance_affecting_records_only, $page_size, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchGetAsyncWithHttpInfo
     *
     * List transactions
     *
     * @param  string $start_date Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (required)
     * @param  string $end_date Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (required)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;/docs/api/payments/v1/#definition-order\&quot;&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'transaction_info')
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'Y')
     * @param  int $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 100)
     * @param  int $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGetAsyncWithHttpInfo($start_date, $end_date, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $store_id = null, $terminal_id = null, $fields = 'transaction_info', $balance_affecting_records_only = 'Y', $page_size = 100, $page = 1, string $contentType = self::contentTypes['searchGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchResponse';
        $request = $this->searchGetRequest($start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $store_id, $terminal_id, $fields, $balance_affecting_records_only, $page_size, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchGet'
     *
     * @param  string $start_date Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (required)
     * @param  string $end_date Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (required)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;/docs/api/payments/v1/#definition-order\&quot;&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;/docs/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'transaction_info')
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional, default to 'Y')
     * @param  int $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional, default to 100)
     * @param  int $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchGetRequest($start_date, $end_date, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $store_id = null, $terminal_id = null, $fields = 'transaction_info', $balance_affecting_records_only = 'Y', $page_size = 100, $page = 1, string $contentType = self::contentTypes['searchGet'][0])
    {

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling searchGet'
            );
        }
        if (strlen($start_date) > 64) {
            throw new \InvalidArgumentException('invalid length for "$start_date" when calling TransactionsApi.searchGet, must be smaller than or equal to 64.');
        }
        if (strlen($start_date) < 20) {
            throw new \InvalidArgumentException('invalid length for "$start_date" when calling TransactionsApi.searchGet, must be bigger than or equal to 20.');
        }
        if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $start_date)) {
            throw new \InvalidArgumentException("invalid value for \"start_date\" when calling TransactionsApi.searchGet, must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.");
        }
        
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling searchGet'
            );
        }
        if (strlen($end_date) > 64) {
            throw new \InvalidArgumentException('invalid length for "$end_date" when calling TransactionsApi.searchGet, must be smaller than or equal to 64.');
        }
        if (strlen($end_date) < 20) {
            throw new \InvalidArgumentException('invalid length for "$end_date" when calling TransactionsApi.searchGet, must be bigger than or equal to 20.');
        }
        if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $end_date)) {
            throw new \InvalidArgumentException("invalid value for \"end_date\" when calling TransactionsApi.searchGet, must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.");
        }
        
        if ($transaction_id !== null && strlen($transaction_id) > 19) {
            throw new \InvalidArgumentException('invalid length for "$transaction_id" when calling TransactionsApi.searchGet, must be smaller than or equal to 19.');
        }
        if ($transaction_id !== null && strlen($transaction_id) < 17) {
            throw new \InvalidArgumentException('invalid length for "$transaction_id" when calling TransactionsApi.searchGet, must be bigger than or equal to 17.');
        }
        









        if ($page_size !== null && $page_size > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling TransactionsApi.searchGet, must be smaller than or equal to 500.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling TransactionsApi.searchGet, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling TransactionsApi.searchGet, must be smaller than or equal to 2147483647.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling TransactionsApi.searchGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/reporting/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_id,
            'transaction_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_type,
            'transaction_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_status,
            'transaction_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_amount,
            'transaction_amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_currency,
            'transaction_currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_instrument_type,
            'payment_instrument_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $terminal_id,
            'terminal_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $balance_affecting_records_only,
            'balance_affecting_records_only', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
