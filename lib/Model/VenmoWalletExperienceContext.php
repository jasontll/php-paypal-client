<?php
/**
 * VenmoWalletExperienceContext
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VenmoWalletExperienceContext Class Doc Comment
 *
 * @category Class
 * @description Customizes the buyer experience during the approval process for payment with Venmo.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Partners and Marketplaces might configure &lt;code&gt;shipping_preference&lt;/code&gt; during partner account setup, which overrides the request values.&lt;/blockquote&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VenmoWalletExperienceContext implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'venmo_wallet_experience_context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_name' => 'string',
        'shipping_preference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_name' => null,
        'shipping_preference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'brand_name' => false,
		'shipping_preference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_name' => 'brand_name',
        'shipping_preference' => 'shipping_preference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_name' => 'setBrandName',
        'shipping_preference' => 'setShippingPreference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_name' => 'getBrandName',
        'shipping_preference' => 'getShippingPreference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIPPING_PREFERENCE_GET_FROM_FILE = 'GET_FROM_FILE';
    public const SHIPPING_PREFERENCE_NO_SHIPPING = 'NO_SHIPPING';
    public const SHIPPING_PREFERENCE_SET_PROVIDED_ADDRESS = 'SET_PROVIDED_ADDRESS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingPreferenceAllowableValues()
    {
        return [
            self::SHIPPING_PREFERENCE_GET_FROM_FILE,
            self::SHIPPING_PREFERENCE_NO_SHIPPING,
            self::SHIPPING_PREFERENCE_SET_PROVIDED_ADDRESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('shipping_preference', $data ?? [], 'GET_FROM_FILE');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) > 127)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['brand_name']) && !preg_match("/^.*$/", $this->container['brand_name'])) {
            $invalidProperties[] = "invalid value for 'brand_name', must be conform to the pattern /^.*$/.";
        }

        $allowedValues = $this->getShippingPreferenceAllowableValues();
        if (!is_null($this->container['shipping_preference']) && !in_array($this->container['shipping_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_preference', must be one of '%s'",
                $this->container['shipping_preference'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shipping_preference']) && (mb_strlen($this->container['shipping_preference']) > 24)) {
            $invalidProperties[] = "invalid value for 'shipping_preference', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['shipping_preference']) && (mb_strlen($this->container['shipping_preference']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_preference', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipping_preference']) && !preg_match("/^[A-Z_]+$/", $this->container['shipping_preference'])) {
            $invalidProperties[] = "invalid value for 'shipping_preference', must be conform to the pattern /^[A-Z_]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name The business name of the merchant. The pattern is defined by an external party and supports Unicode.
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            throw new \InvalidArgumentException('non-nullable brand_name cannot be null');
        }
        if ((mb_strlen($brand_name) > 127)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling VenmoWalletExperienceContext., must be smaller than or equal to 127.');
        }
        if ((mb_strlen($brand_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling VenmoWalletExperienceContext., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $brand_name))) {
            throw new \InvalidArgumentException("invalid value for \$brand_name when calling VenmoWalletExperienceContext., must conform to the pattern /^.*$/.");
        }

        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets shipping_preference
     *
     * @return string|null
     */
    public function getShippingPreference()
    {
        return $this->container['shipping_preference'];
    }

    /**
     * Sets shipping_preference
     *
     * @param string|null $shipping_preference The location from which the shipping address is derived.
     *
     * @return self
     */
    public function setShippingPreference($shipping_preference)
    {
        if (is_null($shipping_preference)) {
            throw new \InvalidArgumentException('non-nullable shipping_preference cannot be null');
        }
        $allowedValues = $this->getShippingPreferenceAllowableValues();
        if (!in_array($shipping_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_preference', must be one of '%s'",
                    $shipping_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($shipping_preference) > 24)) {
            throw new \InvalidArgumentException('invalid length for $shipping_preference when calling VenmoWalletExperienceContext., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($shipping_preference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipping_preference when calling VenmoWalletExperienceContext., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Z_]+$/", $shipping_preference))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_preference when calling VenmoWalletExperienceContext., must conform to the pattern /^[A-Z_]+$/.");
        }

        $this->container['shipping_preference'] = $shipping_preference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


