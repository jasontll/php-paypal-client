<?php
/**
 * TransactionDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction Search
 *
 * Use the Transaction Search API to get the history of transactions for a PayPal account. To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>. For more information about the API, see the <a href=\"/docs/transaction-search/\">Transaction Search API Integration Guide</a>.<blockquote><strong>Note:</strong> To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>.</blockquote>
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionDetail Class Doc Comment
 *
 * @category Class
 * @description The transaction details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_detail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_info' => '\OpenAPI\Client\Model\TransactionInfo',
        'payer_info' => '\OpenAPI\Client\Model\PayerInfo',
        'shipping_info' => '\OpenAPI\Client\Model\ShippingInfo',
        'cart_info' => '\OpenAPI\Client\Model\CartInfo',
        'store_info' => '\OpenAPI\Client\Model\StoreInfo',
        'auction_info' => '\OpenAPI\Client\Model\AuctionInfo',
        'incentive_info' => '\OpenAPI\Client\Model\IncentiveInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_info' => null,
        'payer_info' => null,
        'shipping_info' => null,
        'cart_info' => null,
        'store_info' => null,
        'auction_info' => null,
        'incentive_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_info' => false,
		'payer_info' => false,
		'shipping_info' => false,
		'cart_info' => false,
		'store_info' => false,
		'auction_info' => false,
		'incentive_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_info' => 'transaction_info',
        'payer_info' => 'payer_info',
        'shipping_info' => 'shipping_info',
        'cart_info' => 'cart_info',
        'store_info' => 'store_info',
        'auction_info' => 'auction_info',
        'incentive_info' => 'incentive_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_info' => 'setTransactionInfo',
        'payer_info' => 'setPayerInfo',
        'shipping_info' => 'setShippingInfo',
        'cart_info' => 'setCartInfo',
        'store_info' => 'setStoreInfo',
        'auction_info' => 'setAuctionInfo',
        'incentive_info' => 'setIncentiveInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_info' => 'getTransactionInfo',
        'payer_info' => 'getPayerInfo',
        'shipping_info' => 'getShippingInfo',
        'cart_info' => 'getCartInfo',
        'store_info' => 'getStoreInfo',
        'auction_info' => 'getAuctionInfo',
        'incentive_info' => 'getIncentiveInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('transaction_info', $data ?? [], null);
        $this->setIfExists('payer_info', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('cart_info', $data ?? [], null);
        $this->setIfExists('store_info', $data ?? [], null);
        $this->setIfExists('auction_info', $data ?? [], null);
        $this->setIfExists('incentive_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_info
     *
     * @return \OpenAPI\Client\Model\TransactionInfo|null
     */
    public function getTransactionInfo()
    {
        return $this->container['transaction_info'];
    }

    /**
     * Sets transaction_info
     *
     * @param \OpenAPI\Client\Model\TransactionInfo|null $transaction_info transaction_info
     *
     * @return self
     */
    public function setTransactionInfo($transaction_info)
    {
        if (is_null($transaction_info)) {
            throw new \InvalidArgumentException('non-nullable transaction_info cannot be null');
        }
        $this->container['transaction_info'] = $transaction_info;

        return $this;
    }

    /**
     * Gets payer_info
     *
     * @return \OpenAPI\Client\Model\PayerInfo|null
     */
    public function getPayerInfo()
    {
        return $this->container['payer_info'];
    }

    /**
     * Sets payer_info
     *
     * @param \OpenAPI\Client\Model\PayerInfo|null $payer_info payer_info
     *
     * @return self
     */
    public function setPayerInfo($payer_info)
    {
        if (is_null($payer_info)) {
            throw new \InvalidArgumentException('non-nullable payer_info cannot be null');
        }
        $this->container['payer_info'] = $payer_info;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \OpenAPI\Client\Model\ShippingInfo|null
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \OpenAPI\Client\Model\ShippingInfo|null $shipping_info shipping_info
     *
     * @return self
     */
    public function setShippingInfo($shipping_info)
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets cart_info
     *
     * @return \OpenAPI\Client\Model\CartInfo|null
     */
    public function getCartInfo()
    {
        return $this->container['cart_info'];
    }

    /**
     * Sets cart_info
     *
     * @param \OpenAPI\Client\Model\CartInfo|null $cart_info cart_info
     *
     * @return self
     */
    public function setCartInfo($cart_info)
    {
        if (is_null($cart_info)) {
            throw new \InvalidArgumentException('non-nullable cart_info cannot be null');
        }
        $this->container['cart_info'] = $cart_info;

        return $this;
    }

    /**
     * Gets store_info
     *
     * @return \OpenAPI\Client\Model\StoreInfo|null
     */
    public function getStoreInfo()
    {
        return $this->container['store_info'];
    }

    /**
     * Sets store_info
     *
     * @param \OpenAPI\Client\Model\StoreInfo|null $store_info store_info
     *
     * @return self
     */
    public function setStoreInfo($store_info)
    {
        if (is_null($store_info)) {
            throw new \InvalidArgumentException('non-nullable store_info cannot be null');
        }
        $this->container['store_info'] = $store_info;

        return $this;
    }

    /**
     * Gets auction_info
     *
     * @return \OpenAPI\Client\Model\AuctionInfo|null
     */
    public function getAuctionInfo()
    {
        return $this->container['auction_info'];
    }

    /**
     * Sets auction_info
     *
     * @param \OpenAPI\Client\Model\AuctionInfo|null $auction_info auction_info
     *
     * @return self
     */
    public function setAuctionInfo($auction_info)
    {
        if (is_null($auction_info)) {
            throw new \InvalidArgumentException('non-nullable auction_info cannot be null');
        }
        $this->container['auction_info'] = $auction_info;

        return $this;
    }

    /**
     * Gets incentive_info
     *
     * @return \OpenAPI\Client\Model\IncentiveInfo|null
     */
    public function getIncentiveInfo()
    {
        return $this->container['incentive_info'];
    }

    /**
     * Sets incentive_info
     *
     * @param \OpenAPI\Client\Model\IncentiveInfo|null $incentive_info incentive_info
     *
     * @return self
     */
    public function setIncentiveInfo($incentive_info)
    {
        if (is_null($incentive_info)) {
            throw new \InvalidArgumentException('non-nullable incentive_info cannot be null');
        }
        $this->container['incentive_info'] = $incentive_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


