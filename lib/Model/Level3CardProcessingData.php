<?php
/**
 * Level3CardProcessingData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Level3CardProcessingData Class Doc Comment
 *
 * @category Class
 * @description The level 3 card processing data collections, If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf. Please contact your PayPal Technical Account Manager to define level 3 data for your business.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Level3CardProcessingData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'level_3_card_processing_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipping_amount' => '\OpenAPI\Client\Model\Money',
        'duty_amount' => '\OpenAPI\Client\Model\Money',
        'discount_amount' => '\OpenAPI\Client\Model\Money',
        'shipping_address' => '\OpenAPI\Client\Model\AddressPortable',
        'ships_from_postal_code' => 'string',
        'line_items' => '\OpenAPI\Client\Model\LineItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipping_amount' => null,
        'duty_amount' => null,
        'discount_amount' => null,
        'shipping_address' => null,
        'ships_from_postal_code' => null,
        'line_items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipping_amount' => false,
		'duty_amount' => false,
		'discount_amount' => false,
		'shipping_address' => false,
		'ships_from_postal_code' => false,
		'line_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_amount' => 'shipping_amount',
        'duty_amount' => 'duty_amount',
        'discount_amount' => 'discount_amount',
        'shipping_address' => 'shipping_address',
        'ships_from_postal_code' => 'ships_from_postal_code',
        'line_items' => 'line_items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_amount' => 'setShippingAmount',
        'duty_amount' => 'setDutyAmount',
        'discount_amount' => 'setDiscountAmount',
        'shipping_address' => 'setShippingAddress',
        'ships_from_postal_code' => 'setShipsFromPostalCode',
        'line_items' => 'setLineItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_amount' => 'getShippingAmount',
        'duty_amount' => 'getDutyAmount',
        'discount_amount' => 'getDiscountAmount',
        'shipping_address' => 'getShippingAddress',
        'ships_from_postal_code' => 'getShipsFromPostalCode',
        'line_items' => 'getLineItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('duty_amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('ships_from_postal_code', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ships_from_postal_code']) && (mb_strlen($this->container['ships_from_postal_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'ships_from_postal_code', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['ships_from_postal_code']) && (mb_strlen($this->container['ships_from_postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'ships_from_postal_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ships_from_postal_code']) && !preg_match("/^[a-zA-Z0-9_'.-]*$/", $this->container['ships_from_postal_code'])) {
            $invalidProperties[] = "invalid value for 'ships_from_postal_code', must be conform to the pattern /^[a-zA-Z0-9_'.-]*$/.";
        }

        if (!is_null($this->container['line_items']) && (count($this->container['line_items']) > 100)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['line_items']) && (count($this->container['line_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $shipping_amount shipping_amount
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets duty_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getDutyAmount()
    {
        return $this->container['duty_amount'];
    }

    /**
     * Sets duty_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $duty_amount duty_amount
     *
     * @return self
     */
    public function setDutyAmount($duty_amount)
    {
        if (is_null($duty_amount)) {
            throw new \InvalidArgumentException('non-nullable duty_amount cannot be null');
        }
        $this->container['duty_amount'] = $duty_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \OpenAPI\Client\Model\AddressPortable|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \OpenAPI\Client\Model\AddressPortable|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets ships_from_postal_code
     *
     * @return string|null
     */
    public function getShipsFromPostalCode()
    {
        return $this->container['ships_from_postal_code'];
    }

    /**
     * Sets ships_from_postal_code
     *
     * @param string|null $ships_from_postal_code Use this field to specify the postal code of the shipping location.
     *
     * @return self
     */
    public function setShipsFromPostalCode($ships_from_postal_code)
    {
        if (is_null($ships_from_postal_code)) {
            throw new \InvalidArgumentException('non-nullable ships_from_postal_code cannot be null');
        }
        if ((mb_strlen($ships_from_postal_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $ships_from_postal_code when calling Level3CardProcessingData., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($ships_from_postal_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ships_from_postal_code when calling Level3CardProcessingData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'.-]*$/", $ships_from_postal_code))) {
            throw new \InvalidArgumentException("invalid value for \$ships_from_postal_code when calling Level3CardProcessingData., must conform to the pattern /^[a-zA-Z0-9_'.-]*$/.");
        }

        $this->container['ships_from_postal_code'] = $ships_from_postal_code;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\LineItem[]|null $line_items A list of the items that were purchased with this payment. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }

        if ((count($line_items) > 100)) {
            throw new \InvalidArgumentException('invalid value for $line_items when calling Level3CardProcessingData., number of items must be less than or equal to 100.');
        }
        if ((count($line_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line_items when calling Level3CardProcessingData., number of items must be greater than or equal to 1.');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


