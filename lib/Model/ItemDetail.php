<?php
/**
 * ItemDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction Search
 *
 * Use the Transaction Search API to get the history of transactions for a PayPal account. To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>. For more information about the API, see the <a href=\"/docs/transaction-search/\">Transaction Search API Integration Guide</a>.<blockquote><strong>Note:</strong> To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>.</blockquote>
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ItemDetail Class Doc Comment
 *
 * @category Class
 * @description The item details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'item_detail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_code' => 'string',
        'item_name' => 'string',
        'item_description' => 'string',
        'item_options' => 'string',
        'item_quantity' => 'string',
        'item_unit_price' => '\OpenAPI\Client\Model\Money',
        'item_amount' => '\OpenAPI\Client\Model\Money',
        'discount_amount' => '\OpenAPI\Client\Model\Money',
        'adjustment_amount' => '\OpenAPI\Client\Model\Money',
        'gift_wrap_amount' => '\OpenAPI\Client\Model\Money',
        'tax_percentage' => 'string',
        'tax_amounts' => '\OpenAPI\Client\Model\ItemDetailTaxAmount[]',
        'basic_shipping_amount' => '\OpenAPI\Client\Model\Money',
        'extra_shipping_amount' => '\OpenAPI\Client\Model\Money',
        'handling_amount' => '\OpenAPI\Client\Model\Money',
        'insurance_amount' => '\OpenAPI\Client\Model\Money',
        'total_item_amount' => '\OpenAPI\Client\Model\Money',
        'invoice_number' => 'string',
        'checkout_options' => '\OpenAPI\Client\Model\CheckoutOption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_code' => null,
        'item_name' => null,
        'item_description' => null,
        'item_options' => null,
        'item_quantity' => null,
        'item_unit_price' => null,
        'item_amount' => null,
        'discount_amount' => null,
        'adjustment_amount' => null,
        'gift_wrap_amount' => null,
        'tax_percentage' => 'ppaas_common_percentage_v2',
        'tax_amounts' => null,
        'basic_shipping_amount' => null,
        'extra_shipping_amount' => null,
        'handling_amount' => null,
        'insurance_amount' => null,
        'total_item_amount' => null,
        'invoice_number' => null,
        'checkout_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_code' => false,
		'item_name' => false,
		'item_description' => false,
		'item_options' => false,
		'item_quantity' => false,
		'item_unit_price' => false,
		'item_amount' => false,
		'discount_amount' => false,
		'adjustment_amount' => false,
		'gift_wrap_amount' => false,
		'tax_percentage' => false,
		'tax_amounts' => false,
		'basic_shipping_amount' => false,
		'extra_shipping_amount' => false,
		'handling_amount' => false,
		'insurance_amount' => false,
		'total_item_amount' => false,
		'invoice_number' => false,
		'checkout_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_code' => 'item_code',
        'item_name' => 'item_name',
        'item_description' => 'item_description',
        'item_options' => 'item_options',
        'item_quantity' => 'item_quantity',
        'item_unit_price' => 'item_unit_price',
        'item_amount' => 'item_amount',
        'discount_amount' => 'discount_amount',
        'adjustment_amount' => 'adjustment_amount',
        'gift_wrap_amount' => 'gift_wrap_amount',
        'tax_percentage' => 'tax_percentage',
        'tax_amounts' => 'tax_amounts',
        'basic_shipping_amount' => 'basic_shipping_amount',
        'extra_shipping_amount' => 'extra_shipping_amount',
        'handling_amount' => 'handling_amount',
        'insurance_amount' => 'insurance_amount',
        'total_item_amount' => 'total_item_amount',
        'invoice_number' => 'invoice_number',
        'checkout_options' => 'checkout_options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_code' => 'setItemCode',
        'item_name' => 'setItemName',
        'item_description' => 'setItemDescription',
        'item_options' => 'setItemOptions',
        'item_quantity' => 'setItemQuantity',
        'item_unit_price' => 'setItemUnitPrice',
        'item_amount' => 'setItemAmount',
        'discount_amount' => 'setDiscountAmount',
        'adjustment_amount' => 'setAdjustmentAmount',
        'gift_wrap_amount' => 'setGiftWrapAmount',
        'tax_percentage' => 'setTaxPercentage',
        'tax_amounts' => 'setTaxAmounts',
        'basic_shipping_amount' => 'setBasicShippingAmount',
        'extra_shipping_amount' => 'setExtraShippingAmount',
        'handling_amount' => 'setHandlingAmount',
        'insurance_amount' => 'setInsuranceAmount',
        'total_item_amount' => 'setTotalItemAmount',
        'invoice_number' => 'setInvoiceNumber',
        'checkout_options' => 'setCheckoutOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_code' => 'getItemCode',
        'item_name' => 'getItemName',
        'item_description' => 'getItemDescription',
        'item_options' => 'getItemOptions',
        'item_quantity' => 'getItemQuantity',
        'item_unit_price' => 'getItemUnitPrice',
        'item_amount' => 'getItemAmount',
        'discount_amount' => 'getDiscountAmount',
        'adjustment_amount' => 'getAdjustmentAmount',
        'gift_wrap_amount' => 'getGiftWrapAmount',
        'tax_percentage' => 'getTaxPercentage',
        'tax_amounts' => 'getTaxAmounts',
        'basic_shipping_amount' => 'getBasicShippingAmount',
        'extra_shipping_amount' => 'getExtraShippingAmount',
        'handling_amount' => 'getHandlingAmount',
        'insurance_amount' => 'getInsuranceAmount',
        'total_item_amount' => 'getTotalItemAmount',
        'invoice_number' => 'getInvoiceNumber',
        'checkout_options' => 'getCheckoutOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_code', $data ?? [], null);
        $this->setIfExists('item_name', $data ?? [], null);
        $this->setIfExists('item_description', $data ?? [], null);
        $this->setIfExists('item_options', $data ?? [], null);
        $this->setIfExists('item_quantity', $data ?? [], null);
        $this->setIfExists('item_unit_price', $data ?? [], null);
        $this->setIfExists('item_amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('adjustment_amount', $data ?? [], null);
        $this->setIfExists('gift_wrap_amount', $data ?? [], null);
        $this->setIfExists('tax_percentage', $data ?? [], null);
        $this->setIfExists('tax_amounts', $data ?? [], null);
        $this->setIfExists('basic_shipping_amount', $data ?? [], null);
        $this->setIfExists('extra_shipping_amount', $data ?? [], null);
        $this->setIfExists('handling_amount', $data ?? [], null);
        $this->setIfExists('insurance_amount', $data ?? [], null);
        $this->setIfExists('total_item_amount', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('checkout_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['item_code']) && (mb_strlen($this->container['item_code']) > 1000)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['item_code']) && (mb_strlen($this->container['item_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_code']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['item_code'])) {
            $invalidProperties[] = "invalid value for 'item_code', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['item_name']) && (mb_strlen($this->container['item_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'item_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['item_name']) && (mb_strlen($this->container['item_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_name']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['item_name'])) {
            $invalidProperties[] = "invalid value for 'item_name', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['item_description']) && (mb_strlen($this->container['item_description']) > 2000)) {
            $invalidProperties[] = "invalid value for 'item_description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['item_description']) && (mb_strlen($this->container['item_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_description']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['item_description'])) {
            $invalidProperties[] = "invalid value for 'item_description', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['item_options']) && (mb_strlen($this->container['item_options']) > 4000)) {
            $invalidProperties[] = "invalid value for 'item_options', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['item_options']) && (mb_strlen($this->container['item_options']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_options', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_options']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['item_options'])) {
            $invalidProperties[] = "invalid value for 'item_options', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['item_quantity']) && (mb_strlen($this->container['item_quantity']) > 4000)) {
            $invalidProperties[] = "invalid value for 'item_quantity', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['item_quantity']) && (mb_strlen($this->container['item_quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_quantity']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['item_quantity'])) {
            $invalidProperties[] = "invalid value for 'item_quantity', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['tax_percentage']) && !preg_match("/^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/", $this->container['tax_percentage'])) {
            $invalidProperties[] = "invalid value for 'tax_percentage', must be conform to the pattern /^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/.";
        }

        if (!is_null($this->container['tax_amounts']) && (count($this->container['tax_amounts']) > 32767)) {
            $invalidProperties[] = "invalid value for 'tax_amounts', number of items must be less than or equal to 32767.";
        }

        if (!is_null($this->container['tax_amounts']) && (count($this->container['tax_amounts']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_amounts', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['invoice_number']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['invoice_number'])) {
            $invalidProperties[] = "invalid value for 'invoice_number', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['checkout_options']) && (count($this->container['checkout_options']) > 32767)) {
            $invalidProperties[] = "invalid value for 'checkout_options', number of items must be less than or equal to 32767.";
        }

        if (!is_null($this->container['checkout_options']) && (count($this->container['checkout_options']) < 1)) {
            $invalidProperties[] = "invalid value for 'checkout_options', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_code
     *
     * @return string|null
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string|null $item_code An item code that identifies a merchant's goods or service.
     *
     * @return self
     */
    public function setItemCode($item_code)
    {
        if (is_null($item_code)) {
            throw new \InvalidArgumentException('non-nullable item_code cannot be null');
        }
        if ((mb_strlen($item_code) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling ItemDetail., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($item_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $item_code))) {
            throw new \InvalidArgumentException("invalid value for \$item_code when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string|null $item_name The item name.
     *
     * @return self
     */
    public function setItemName($item_name)
    {
        if (is_null($item_name)) {
            throw new \InvalidArgumentException('non-nullable item_name cannot be null');
        }
        if ((mb_strlen($item_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $item_name when calling ItemDetail., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($item_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_name when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $item_name))) {
            throw new \InvalidArgumentException("invalid value for \$item_name when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string|null
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string|null $item_description The item description.
     *
     * @return self
     */
    public function setItemDescription($item_description)
    {
        if (is_null($item_description)) {
            throw new \InvalidArgumentException('non-nullable item_description cannot be null');
        }
        if ((mb_strlen($item_description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $item_description when calling ItemDetail., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($item_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_description when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $item_description))) {
            throw new \InvalidArgumentException("invalid value for \$item_description when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets item_options
     *
     * @return string|null
     */
    public function getItemOptions()
    {
        return $this->container['item_options'];
    }

    /**
     * Sets item_options
     *
     * @param string|null $item_options The item options. Describes option choices on the purchase of the item in some detail.
     *
     * @return self
     */
    public function setItemOptions($item_options)
    {
        if (is_null($item_options)) {
            throw new \InvalidArgumentException('non-nullable item_options cannot be null');
        }
        if ((mb_strlen($item_options) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $item_options when calling ItemDetail., must be smaller than or equal to 4000.');
        }
        if ((mb_strlen($item_options) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_options when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $item_options))) {
            throw new \InvalidArgumentException("invalid value for \$item_options when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['item_options'] = $item_options;

        return $this;
    }

    /**
     * Gets item_quantity
     *
     * @return string|null
     */
    public function getItemQuantity()
    {
        return $this->container['item_quantity'];
    }

    /**
     * Sets item_quantity
     *
     * @param string|null $item_quantity The number of purchased units of goods or a service.
     *
     * @return self
     */
    public function setItemQuantity($item_quantity)
    {
        if (is_null($item_quantity)) {
            throw new \InvalidArgumentException('non-nullable item_quantity cannot be null');
        }
        if ((mb_strlen($item_quantity) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $item_quantity when calling ItemDetail., must be smaller than or equal to 4000.');
        }
        if ((mb_strlen($item_quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_quantity when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $item_quantity))) {
            throw new \InvalidArgumentException("invalid value for \$item_quantity when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['item_quantity'] = $item_quantity;

        return $this;
    }

    /**
     * Gets item_unit_price
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getItemUnitPrice()
    {
        return $this->container['item_unit_price'];
    }

    /**
     * Sets item_unit_price
     *
     * @param \OpenAPI\Client\Model\Money|null $item_unit_price item_unit_price
     *
     * @return self
     */
    public function setItemUnitPrice($item_unit_price)
    {
        if (is_null($item_unit_price)) {
            throw new \InvalidArgumentException('non-nullable item_unit_price cannot be null');
        }
        $this->container['item_unit_price'] = $item_unit_price;

        return $this;
    }

    /**
     * Gets item_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getItemAmount()
    {
        return $this->container['item_amount'];
    }

    /**
     * Sets item_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $item_amount item_amount
     *
     * @return self
     */
    public function setItemAmount($item_amount)
    {
        if (is_null($item_amount)) {
            throw new \InvalidArgumentException('non-nullable item_amount cannot be null');
        }
        $this->container['item_amount'] = $item_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets adjustment_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustment_amount'];
    }

    /**
     * Sets adjustment_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $adjustment_amount adjustment_amount
     *
     * @return self
     */
    public function setAdjustmentAmount($adjustment_amount)
    {
        if (is_null($adjustment_amount)) {
            throw new \InvalidArgumentException('non-nullable adjustment_amount cannot be null');
        }
        $this->container['adjustment_amount'] = $adjustment_amount;

        return $this;
    }

    /**
     * Gets gift_wrap_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getGiftWrapAmount()
    {
        return $this->container['gift_wrap_amount'];
    }

    /**
     * Sets gift_wrap_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $gift_wrap_amount gift_wrap_amount
     *
     * @return self
     */
    public function setGiftWrapAmount($gift_wrap_amount)
    {
        if (is_null($gift_wrap_amount)) {
            throw new \InvalidArgumentException('non-nullable gift_wrap_amount cannot be null');
        }
        $this->container['gift_wrap_amount'] = $gift_wrap_amount;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return string|null
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param string|null $tax_percentage The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
     *
     * @return self
     */
    public function setTaxPercentage($tax_percentage)
    {
        if (is_null($tax_percentage)) {
            throw new \InvalidArgumentException('non-nullable tax_percentage cannot be null');
        }

        if ((!preg_match("/^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/", $tax_percentage))) {
            throw new \InvalidArgumentException("invalid value for \$tax_percentage when calling ItemDetail., must conform to the pattern /^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/.");
        }

        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets tax_amounts
     *
     * @return \OpenAPI\Client\Model\ItemDetailTaxAmount[]|null
     */
    public function getTaxAmounts()
    {
        return $this->container['tax_amounts'];
    }

    /**
     * Sets tax_amounts
     *
     * @param \OpenAPI\Client\Model\ItemDetailTaxAmount[]|null $tax_amounts An array of tax amounts levied by a government on the purchase of goods or services.
     *
     * @return self
     */
    public function setTaxAmounts($tax_amounts)
    {
        if (is_null($tax_amounts)) {
            throw new \InvalidArgumentException('non-nullable tax_amounts cannot be null');
        }

        if ((count($tax_amounts) > 32767)) {
            throw new \InvalidArgumentException('invalid value for $tax_amounts when calling ItemDetail., number of items must be less than or equal to 32767.');
        }
        if ((count($tax_amounts) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_amounts when calling ItemDetail., number of items must be greater than or equal to 1.');
        }
        $this->container['tax_amounts'] = $tax_amounts;

        return $this;
    }

    /**
     * Gets basic_shipping_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getBasicShippingAmount()
    {
        return $this->container['basic_shipping_amount'];
    }

    /**
     * Sets basic_shipping_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $basic_shipping_amount basic_shipping_amount
     *
     * @return self
     */
    public function setBasicShippingAmount($basic_shipping_amount)
    {
        if (is_null($basic_shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable basic_shipping_amount cannot be null');
        }
        $this->container['basic_shipping_amount'] = $basic_shipping_amount;

        return $this;
    }

    /**
     * Gets extra_shipping_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getExtraShippingAmount()
    {
        return $this->container['extra_shipping_amount'];
    }

    /**
     * Sets extra_shipping_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $extra_shipping_amount extra_shipping_amount
     *
     * @return self
     */
    public function setExtraShippingAmount($extra_shipping_amount)
    {
        if (is_null($extra_shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable extra_shipping_amount cannot be null');
        }
        $this->container['extra_shipping_amount'] = $extra_shipping_amount;

        return $this;
    }

    /**
     * Gets handling_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getHandlingAmount()
    {
        return $this->container['handling_amount'];
    }

    /**
     * Sets handling_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $handling_amount handling_amount
     *
     * @return self
     */
    public function setHandlingAmount($handling_amount)
    {
        if (is_null($handling_amount)) {
            throw new \InvalidArgumentException('non-nullable handling_amount cannot be null');
        }
        $this->container['handling_amount'] = $handling_amount;

        return $this;
    }

    /**
     * Gets insurance_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getInsuranceAmount()
    {
        return $this->container['insurance_amount'];
    }

    /**
     * Sets insurance_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $insurance_amount insurance_amount
     *
     * @return self
     */
    public function setInsuranceAmount($insurance_amount)
    {
        if (is_null($insurance_amount)) {
            throw new \InvalidArgumentException('non-nullable insurance_amount cannot be null');
        }
        $this->container['insurance_amount'] = $insurance_amount;

        return $this;
    }

    /**
     * Gets total_item_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalItemAmount()
    {
        return $this->container['total_item_amount'];
    }

    /**
     * Sets total_item_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_item_amount total_item_amount
     *
     * @return self
     */
    public function setTotalItemAmount($total_item_amount)
    {
        if (is_null($total_item_amount)) {
            throw new \InvalidArgumentException('non-nullable total_item_amount cannot be null');
        }
        $this->container['total_item_amount'] = $total_item_amount;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number The invoice number. An alphanumeric string that identifies a billing for a merchant.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        if ((mb_strlen($invoice_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ItemDetail., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($invoice_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ItemDetail., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $invoice_number))) {
            throw new \InvalidArgumentException("invalid value for \$invoice_number when calling ItemDetail., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets checkout_options
     *
     * @return \OpenAPI\Client\Model\CheckoutOption[]|null
     */
    public function getCheckoutOptions()
    {
        return $this->container['checkout_options'];
    }

    /**
     * Sets checkout_options
     *
     * @param \OpenAPI\Client\Model\CheckoutOption[]|null $checkout_options An array of checkout options. Each option has a name and value.
     *
     * @return self
     */
    public function setCheckoutOptions($checkout_options)
    {
        if (is_null($checkout_options)) {
            throw new \InvalidArgumentException('non-nullable checkout_options cannot be null');
        }

        if ((count($checkout_options) > 32767)) {
            throw new \InvalidArgumentException('invalid value for $checkout_options when calling ItemDetail., number of items must be less than or equal to 32767.');
        }
        if ((count($checkout_options) < 1)) {
            throw new \InvalidArgumentException('invalid length for $checkout_options when calling ItemDetail., number of items must be greater than or equal to 1.');
        }
        $this->container['checkout_options'] = $checkout_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


