<?php
/**
 * NetworkTokenRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkTokenRequest Class Doc Comment
 *
 * @category Class
 * @description The Third Party Network token used to fund a payment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkTokenRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network_token_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'expiry' => 'string',
        'cryptogram' => 'string',
        'eci_flag' => '\OpenAPI\Client\Model\EciFlag',
        'token_requestor_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'expiry' => null,
        'cryptogram' => null,
        'eci_flag' => null,
        'token_requestor_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'expiry' => false,
		'cryptogram' => false,
		'eci_flag' => false,
		'token_requestor_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'expiry' => 'expiry',
        'cryptogram' => 'cryptogram',
        'eci_flag' => 'eci_flag',
        'token_requestor_id' => 'token_requestor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'expiry' => 'setExpiry',
        'cryptogram' => 'setCryptogram',
        'eci_flag' => 'setEciFlag',
        'token_requestor_id' => 'setTokenRequestorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'expiry' => 'getExpiry',
        'cryptogram' => 'getCryptogram',
        'eci_flag' => 'getEciFlag',
        'token_requestor_id' => 'getTokenRequestorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('expiry', $data ?? [], null);
        $this->setIfExists('cryptogram', $data ?? [], null);
        $this->setIfExists('eci_flag', $data ?? [], null);
        $this->setIfExists('token_requestor_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 19)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 19.";
        }

        if ((mb_strlen($this->container['number']) < 13)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 13.";
        }

        if (!preg_match("/^[0-9]{13,19}$/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /^[0-9]{13,19}$/.";
        }

        if ($this->container['expiry'] === null) {
            $invalidProperties[] = "'expiry' can't be null";
        }
        if ((mb_strlen($this->container['expiry']) > 7)) {
            $invalidProperties[] = "invalid value for 'expiry', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['expiry']) < 7)) {
            $invalidProperties[] = "invalid value for 'expiry', the character length must be bigger than or equal to 7.";
        }

        if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/", $this->container['expiry'])) {
            $invalidProperties[] = "invalid value for 'expiry', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])$/.";
        }

        if (!is_null($this->container['cryptogram']) && (mb_strlen($this->container['cryptogram']) > 32)) {
            $invalidProperties[] = "invalid value for 'cryptogram', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['cryptogram']) && (mb_strlen($this->container['cryptogram']) < 28)) {
            $invalidProperties[] = "invalid value for 'cryptogram', the character length must be bigger than or equal to 28.";
        }

        if (!is_null($this->container['cryptogram']) && !preg_match("/^.*$/", $this->container['cryptogram'])) {
            $invalidProperties[] = "invalid value for 'cryptogram', must be conform to the pattern /^.*$/.";
        }

        if (!is_null($this->container['token_requestor_id']) && (mb_strlen($this->container['token_requestor_id']) > 11)) {
            $invalidProperties[] = "invalid value for 'token_requestor_id', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['token_requestor_id']) && (mb_strlen($this->container['token_requestor_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'token_requestor_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['token_requestor_id']) && !preg_match("/^[0-9A-Z_]+$/", $this->container['token_requestor_id'])) {
            $invalidProperties[] = "invalid value for 'token_requestor_id', must be conform to the pattern /^[0-9A-Z_]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Third party network token number.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $number when calling NetworkTokenRequest., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($number) < 13)) {
            throw new \InvalidArgumentException('invalid length for $number when calling NetworkTokenRequest., must be bigger than or equal to 13.');
        }
        if ((!preg_match("/^[0-9]{13,19}$/", $number))) {
            throw new \InvalidArgumentException("invalid value for \$number when calling NetworkTokenRequest., must conform to the pattern /^[0-9]{13,19}$/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return self
     */
    public function setExpiry($expiry)
    {
        if (is_null($expiry)) {
            throw new \InvalidArgumentException('non-nullable expiry cannot be null');
        }
        if ((mb_strlen($expiry) > 7)) {
            throw new \InvalidArgumentException('invalid length for $expiry when calling NetworkTokenRequest., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($expiry) < 7)) {
            throw new \InvalidArgumentException('invalid length for $expiry when calling NetworkTokenRequest., must be bigger than or equal to 7.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/", $expiry))) {
            throw new \InvalidArgumentException("invalid value for \$expiry when calling NetworkTokenRequest., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])$/.");
        }

        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets cryptogram
     *
     * @return string|null
     */
    public function getCryptogram()
    {
        return $this->container['cryptogram'];
    }

    /**
     * Sets cryptogram
     *
     * @param string|null $cryptogram An Encrypted one-time use value that's sent along with Network Token. This field is not required to be present for recurring transactions.
     *
     * @return self
     */
    public function setCryptogram($cryptogram)
    {
        if (is_null($cryptogram)) {
            throw new \InvalidArgumentException('non-nullable cryptogram cannot be null');
        }
        if ((mb_strlen($cryptogram) > 32)) {
            throw new \InvalidArgumentException('invalid length for $cryptogram when calling NetworkTokenRequest., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($cryptogram) < 28)) {
            throw new \InvalidArgumentException('invalid length for $cryptogram when calling NetworkTokenRequest., must be bigger than or equal to 28.');
        }
        if ((!preg_match("/^.*$/", $cryptogram))) {
            throw new \InvalidArgumentException("invalid value for \$cryptogram when calling NetworkTokenRequest., must conform to the pattern /^.*$/.");
        }

        $this->container['cryptogram'] = $cryptogram;

        return $this;
    }

    /**
     * Gets eci_flag
     *
     * @return \OpenAPI\Client\Model\EciFlag|null
     */
    public function getEciFlag()
    {
        return $this->container['eci_flag'];
    }

    /**
     * Sets eci_flag
     *
     * @param \OpenAPI\Client\Model\EciFlag|null $eci_flag eci_flag
     *
     * @return self
     */
    public function setEciFlag($eci_flag)
    {
        if (is_null($eci_flag)) {
            throw new \InvalidArgumentException('non-nullable eci_flag cannot be null');
        }
        $this->container['eci_flag'] = $eci_flag;

        return $this;
    }

    /**
     * Gets token_requestor_id
     *
     * @return string|null
     */
    public function getTokenRequestorId()
    {
        return $this->container['token_requestor_id'];
    }

    /**
     * Sets token_requestor_id
     *
     * @param string|null $token_requestor_id A TRID, or a Token Requestor ID, is an identifier used by merchants to request network tokens from card networks. A TRID is a precursor to obtaining a network token for a credit card primary account number (PAN), and will aid in enabling secure card on file (COF) payments and reducing fraud.
     *
     * @return self
     */
    public function setTokenRequestorId($token_requestor_id)
    {
        if (is_null($token_requestor_id)) {
            throw new \InvalidArgumentException('non-nullable token_requestor_id cannot be null');
        }
        if ((mb_strlen($token_requestor_id) > 11)) {
            throw new \InvalidArgumentException('invalid length for $token_requestor_id when calling NetworkTokenRequest., must be smaller than or equal to 11.');
        }
        if ((mb_strlen($token_requestor_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token_requestor_id when calling NetworkTokenRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9A-Z_]+$/", $token_requestor_id))) {
            throw new \InvalidArgumentException("invalid value for \$token_requestor_id when calling NetworkTokenRequest., must conform to the pattern /^[0-9A-Z_]+$/.");
        }

        $this->container['token_requestor_id'] = $token_requestor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


