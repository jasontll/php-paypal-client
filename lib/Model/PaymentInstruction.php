<?php
/**
 * PaymentInstruction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentInstruction Class Doc Comment
 *
 * @category Class
 * @description Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentInstruction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment_instruction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'platform_fees' => '\OpenAPI\Client\Model\PlatformFee[]',
        'disbursement_mode' => '\OpenAPI\Client\Model\DisbursementMode',
        'payee_pricing_tier_id' => 'string',
        'payee_receivable_fx_rate_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'platform_fees' => null,
        'disbursement_mode' => null,
        'payee_pricing_tier_id' => null,
        'payee_receivable_fx_rate_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'platform_fees' => false,
		'disbursement_mode' => false,
		'payee_pricing_tier_id' => false,
		'payee_receivable_fx_rate_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'platform_fees' => 'platform_fees',
        'disbursement_mode' => 'disbursement_mode',
        'payee_pricing_tier_id' => 'payee_pricing_tier_id',
        'payee_receivable_fx_rate_id' => 'payee_receivable_fx_rate_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'platform_fees' => 'setPlatformFees',
        'disbursement_mode' => 'setDisbursementMode',
        'payee_pricing_tier_id' => 'setPayeePricingTierId',
        'payee_receivable_fx_rate_id' => 'setPayeeReceivableFxRateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'platform_fees' => 'getPlatformFees',
        'disbursement_mode' => 'getDisbursementMode',
        'payee_pricing_tier_id' => 'getPayeePricingTierId',
        'payee_receivable_fx_rate_id' => 'getPayeeReceivableFxRateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('platform_fees', $data ?? [], null);
        $this->setIfExists('disbursement_mode', $data ?? [], null);
        $this->setIfExists('payee_pricing_tier_id', $data ?? [], null);
        $this->setIfExists('payee_receivable_fx_rate_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['platform_fees']) && (count($this->container['platform_fees']) > 1)) {
            $invalidProperties[] = "invalid value for 'platform_fees', number of items must be less than or equal to 1.";
        }

        if (!is_null($this->container['platform_fees']) && (count($this->container['platform_fees']) < 0)) {
            $invalidProperties[] = "invalid value for 'platform_fees', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['payee_pricing_tier_id']) && (mb_strlen($this->container['payee_pricing_tier_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'payee_pricing_tier_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['payee_pricing_tier_id']) && (mb_strlen($this->container['payee_pricing_tier_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payee_pricing_tier_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payee_pricing_tier_id']) && !preg_match("/^.*$/", $this->container['payee_pricing_tier_id'])) {
            $invalidProperties[] = "invalid value for 'payee_pricing_tier_id', must be conform to the pattern /^.*$/.";
        }

        if (!is_null($this->container['payee_receivable_fx_rate_id']) && (mb_strlen($this->container['payee_receivable_fx_rate_id']) > 4000)) {
            $invalidProperties[] = "invalid value for 'payee_receivable_fx_rate_id', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['payee_receivable_fx_rate_id']) && (mb_strlen($this->container['payee_receivable_fx_rate_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payee_receivable_fx_rate_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payee_receivable_fx_rate_id']) && !preg_match("/^.*$/", $this->container['payee_receivable_fx_rate_id'])) {
            $invalidProperties[] = "invalid value for 'payee_receivable_fx_rate_id', must be conform to the pattern /^.*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets platform_fees
     *
     * @return \OpenAPI\Client\Model\PlatformFee[]|null
     */
    public function getPlatformFees()
    {
        return $this->container['platform_fees'];
    }

    /**
     * Sets platform_fees
     *
     * @param \OpenAPI\Client\Model\PlatformFee[]|null $platform_fees An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.
     *
     * @return self
     */
    public function setPlatformFees($platform_fees)
    {
        if (is_null($platform_fees)) {
            throw new \InvalidArgumentException('non-nullable platform_fees cannot be null');
        }

        if ((count($platform_fees) > 1)) {
            throw new \InvalidArgumentException('invalid value for $platform_fees when calling PaymentInstruction., number of items must be less than or equal to 1.');
        }
        if ((count($platform_fees) < 0)) {
            throw new \InvalidArgumentException('invalid length for $platform_fees when calling PaymentInstruction., number of items must be greater than or equal to 0.');
        }
        $this->container['platform_fees'] = $platform_fees;

        return $this;
    }

    /**
     * Gets disbursement_mode
     *
     * @return \OpenAPI\Client\Model\DisbursementMode|null
     */
    public function getDisbursementMode()
    {
        return $this->container['disbursement_mode'];
    }

    /**
     * Sets disbursement_mode
     *
     * @param \OpenAPI\Client\Model\DisbursementMode|null $disbursement_mode disbursement_mode
     *
     * @return self
     */
    public function setDisbursementMode($disbursement_mode)
    {
        if (is_null($disbursement_mode)) {
            throw new \InvalidArgumentException('non-nullable disbursement_mode cannot be null');
        }
        $this->container['disbursement_mode'] = $disbursement_mode;

        return $this;
    }

    /**
     * Gets payee_pricing_tier_id
     *
     * @return string|null
     */
    public function getPayeePricingTierId()
    {
        return $this->container['payee_pricing_tier_id'];
    }

    /**
     * Sets payee_pricing_tier_id
     *
     * @param string|null $payee_pricing_tier_id This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.
     *
     * @return self
     */
    public function setPayeePricingTierId($payee_pricing_tier_id)
    {
        if (is_null($payee_pricing_tier_id)) {
            throw new \InvalidArgumentException('non-nullable payee_pricing_tier_id cannot be null');
        }
        if ((mb_strlen($payee_pricing_tier_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $payee_pricing_tier_id when calling PaymentInstruction., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($payee_pricing_tier_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payee_pricing_tier_id when calling PaymentInstruction., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $payee_pricing_tier_id))) {
            throw new \InvalidArgumentException("invalid value for \$payee_pricing_tier_id when calling PaymentInstruction., must conform to the pattern /^.*$/.");
        }

        $this->container['payee_pricing_tier_id'] = $payee_pricing_tier_id;

        return $this;
    }

    /**
     * Gets payee_receivable_fx_rate_id
     *
     * @return string|null
     */
    public function getPayeeReceivableFxRateId()
    {
        return $this->container['payee_receivable_fx_rate_id'];
    }

    /**
     * Sets payee_receivable_fx_rate_id
     *
     * @param string|null $payee_receivable_fx_rate_id FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.
     *
     * @return self
     */
    public function setPayeeReceivableFxRateId($payee_receivable_fx_rate_id)
    {
        if (is_null($payee_receivable_fx_rate_id)) {
            throw new \InvalidArgumentException('non-nullable payee_receivable_fx_rate_id cannot be null');
        }
        if ((mb_strlen($payee_receivable_fx_rate_id) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $payee_receivable_fx_rate_id when calling PaymentInstruction., must be smaller than or equal to 4000.');
        }
        if ((mb_strlen($payee_receivable_fx_rate_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payee_receivable_fx_rate_id when calling PaymentInstruction., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $payee_receivable_fx_rate_id))) {
            throw new \InvalidArgumentException("invalid value for \$payee_receivable_fx_rate_id when calling PaymentInstruction., must conform to the pattern /^.*$/.");
        }

        $this->container['payee_receivable_fx_rate_id'] = $payee_receivable_fx_rate_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


