<?php
/**
 * ShipmentTracker
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShipmentTracker Class Doc Comment
 *
 * @category Class
 * @description The tracking information for a shipment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentTracker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment_tracker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_id' => 'string',
        'tracking_number' => 'string',
        'tracking_number_type' => '\OpenAPI\Client\Model\ShipmentTrackingNumberType',
        'status' => '\OpenAPI\Client\Model\ShipmentTrackingStatus',
        'shipment_date' => 'string',
        'carrier' => '\OpenAPI\Client\Model\ShipmentCarrier',
        'carrier_name_other' => 'string',
        'postage_payment_id' => 'string',
        'notify_buyer' => 'bool',
        'quantity' => 'int',
        'tracking_number_validated' => 'bool',
        'last_updated_time' => 'string',
        'shipment_direction' => 'string',
        'shipment_uploader' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_id' => null,
        'tracking_number' => null,
        'tracking_number_type' => null,
        'status' => null,
        'shipment_date' => 'ppaas_date_notime_v2',
        'carrier' => null,
        'carrier_name_other' => null,
        'postage_payment_id' => null,
        'notify_buyer' => null,
        'quantity' => null,
        'tracking_number_validated' => null,
        'last_updated_time' => 'ppaas_date_time_v3',
        'shipment_direction' => null,
        'shipment_uploader' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_id' => false,
		'tracking_number' => false,
		'tracking_number_type' => false,
		'status' => false,
		'shipment_date' => false,
		'carrier' => false,
		'carrier_name_other' => false,
		'postage_payment_id' => false,
		'notify_buyer' => false,
		'quantity' => false,
		'tracking_number_validated' => false,
		'last_updated_time' => false,
		'shipment_direction' => false,
		'shipment_uploader' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transaction_id',
        'tracking_number' => 'tracking_number',
        'tracking_number_type' => 'tracking_number_type',
        'status' => 'status',
        'shipment_date' => 'shipment_date',
        'carrier' => 'carrier',
        'carrier_name_other' => 'carrier_name_other',
        'postage_payment_id' => 'postage_payment_id',
        'notify_buyer' => 'notify_buyer',
        'quantity' => 'quantity',
        'tracking_number_validated' => 'tracking_number_validated',
        'last_updated_time' => 'last_updated_time',
        'shipment_direction' => 'shipment_direction',
        'shipment_uploader' => 'shipment_uploader'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'tracking_number' => 'setTrackingNumber',
        'tracking_number_type' => 'setTrackingNumberType',
        'status' => 'setStatus',
        'shipment_date' => 'setShipmentDate',
        'carrier' => 'setCarrier',
        'carrier_name_other' => 'setCarrierNameOther',
        'postage_payment_id' => 'setPostagePaymentId',
        'notify_buyer' => 'setNotifyBuyer',
        'quantity' => 'setQuantity',
        'tracking_number_validated' => 'setTrackingNumberValidated',
        'last_updated_time' => 'setLastUpdatedTime',
        'shipment_direction' => 'setShipmentDirection',
        'shipment_uploader' => 'setShipmentUploader'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'tracking_number' => 'getTrackingNumber',
        'tracking_number_type' => 'getTrackingNumberType',
        'status' => 'getStatus',
        'shipment_date' => 'getShipmentDate',
        'carrier' => 'getCarrier',
        'carrier_name_other' => 'getCarrierNameOther',
        'postage_payment_id' => 'getPostagePaymentId',
        'notify_buyer' => 'getNotifyBuyer',
        'quantity' => 'getQuantity',
        'tracking_number_validated' => 'getTrackingNumberValidated',
        'last_updated_time' => 'getLastUpdatedTime',
        'shipment_direction' => 'getShipmentDirection',
        'shipment_uploader' => 'getShipmentUploader'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIPMENT_DIRECTION_FORWARD = 'FORWARD';
    public const SHIPMENT_DIRECTION__RETURN = 'RETURN';
    public const SHIPMENT_UPLOADER_MERCHANT = 'MERCHANT';
    public const SHIPMENT_UPLOADER_CONSUMER = 'CONSUMER';
    public const SHIPMENT_UPLOADER_PARTNER = 'PARTNER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentDirectionAllowableValues()
    {
        return [
            self::SHIPMENT_DIRECTION_FORWARD,
            self::SHIPMENT_DIRECTION__RETURN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentUploaderAllowableValues()
    {
        return [
            self::SHIPMENT_UPLOADER_MERCHANT,
            self::SHIPMENT_UPLOADER_CONSUMER,
            self::SHIPMENT_UPLOADER_PARTNER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_number_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('shipment_date', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('carrier_name_other', $data ?? [], null);
        $this->setIfExists('postage_payment_id', $data ?? [], null);
        $this->setIfExists('notify_buyer', $data ?? [], false);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('tracking_number_validated', $data ?? [], null);
        $this->setIfExists('last_updated_time', $data ?? [], null);
        $this->setIfExists('shipment_direction', $data ?? [], null);
        $this->setIfExists('shipment_uploader', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ((mb_strlen($this->container['transaction_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['transaction_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9]*$/", $this->container['transaction_id'])) {
            $invalidProperties[] = "invalid value for 'transaction_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if (!is_null($this->container['shipment_date']) && (mb_strlen($this->container['shipment_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'shipment_date', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['shipment_date']) && (mb_strlen($this->container['shipment_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'shipment_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['shipment_date']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $this->container['shipment_date'])) {
            $invalidProperties[] = "invalid value for 'shipment_date', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.";
        }

        if (!is_null($this->container['carrier_name_other']) && (mb_strlen($this->container['carrier_name_other']) > 64)) {
            $invalidProperties[] = "invalid value for 'carrier_name_other', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['carrier_name_other']) && (mb_strlen($this->container['carrier_name_other']) < 1)) {
            $invalidProperties[] = "invalid value for 'carrier_name_other', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['postage_payment_id']) && (mb_strlen($this->container['postage_payment_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'postage_payment_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['postage_payment_id']) && (mb_strlen($this->container['postage_payment_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'postage_payment_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 100)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_updated_time']) && (mb_strlen($this->container['last_updated_time']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_updated_time', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['last_updated_time']) && (mb_strlen($this->container['last_updated_time']) < 20)) {
            $invalidProperties[] = "invalid value for 'last_updated_time', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['last_updated_time']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $this->container['last_updated_time'])) {
            $invalidProperties[] = "invalid value for 'last_updated_time', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.";
        }

        $allowedValues = $this->getShipmentDirectionAllowableValues();
        if (!is_null($this->container['shipment_direction']) && !in_array($this->container['shipment_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_direction', must be one of '%s'",
                $this->container['shipment_direction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shipment_direction']) && (mb_strlen($this->container['shipment_direction']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipment_direction', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipment_direction']) && (mb_strlen($this->container['shipment_direction']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_direction', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipment_direction']) && !preg_match("/^[0-9A-Z_]+$/", $this->container['shipment_direction'])) {
            $invalidProperties[] = "invalid value for 'shipment_direction', must be conform to the pattern /^[0-9A-Z_]+$/.";
        }

        $allowedValues = $this->getShipmentUploaderAllowableValues();
        if (!is_null($this->container['shipment_uploader']) && !in_array($this->container['shipment_uploader'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_uploader', must be one of '%s'",
                $this->container['shipment_uploader'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shipment_uploader']) && (mb_strlen($this->container['shipment_uploader']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipment_uploader', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipment_uploader']) && (mb_strlen($this->container['shipment_uploader']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_uploader', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipment_uploader']) && !preg_match("/^[0-9A-Z_]+$/", $this->container['shipment_uploader'])) {
            $invalidProperties[] = "invalid value for 'shipment_uploader', must be conform to the pattern /^[0-9A-Z_]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id The PayPal transaction ID.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        if ((mb_strlen($transaction_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling ShipmentTracker., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($transaction_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling ShipmentTracker., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $transaction_id))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_id when calling ShipmentTracker., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number The tracking number for the shipment. This property supports Unicode.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        if ((mb_strlen($tracking_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling ShipmentTracker., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($tracking_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling ShipmentTracker., must be bigger than or equal to 1.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_number_type
     *
     * @return \OpenAPI\Client\Model\ShipmentTrackingNumberType|null
     */
    public function getTrackingNumberType()
    {
        return $this->container['tracking_number_type'];
    }

    /**
     * Sets tracking_number_type
     *
     * @param \OpenAPI\Client\Model\ShipmentTrackingNumberType|null $tracking_number_type tracking_number_type
     *
     * @return self
     */
    public function setTrackingNumberType($tracking_number_type)
    {
        if (is_null($tracking_number_type)) {
            throw new \InvalidArgumentException('non-nullable tracking_number_type cannot be null');
        }
        $this->container['tracking_number_type'] = $tracking_number_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ShipmentTrackingStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ShipmentTrackingStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipment_date
     *
     * @return string|null
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     *
     * @param string|null $shipment_date The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
     *
     * @return self
     */
    public function setShipmentDate($shipment_date)
    {
        if (is_null($shipment_date)) {
            throw new \InvalidArgumentException('non-nullable shipment_date cannot be null');
        }
        if ((mb_strlen($shipment_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $shipment_date when calling ShipmentTracker., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($shipment_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $shipment_date when calling ShipmentTracker., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $shipment_date))) {
            throw new \InvalidArgumentException("invalid value for \$shipment_date when calling ShipmentTracker., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.");
        }

        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \OpenAPI\Client\Model\ShipmentCarrier|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \OpenAPI\Client\Model\ShipmentCarrier|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets carrier_name_other
     *
     * @return string|null
     */
    public function getCarrierNameOther()
    {
        return $this->container['carrier_name_other'];
    }

    /**
     * Sets carrier_name_other
     *
     * @param string|null $carrier_name_other The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.
     *
     * @return self
     */
    public function setCarrierNameOther($carrier_name_other)
    {
        if (is_null($carrier_name_other)) {
            throw new \InvalidArgumentException('non-nullable carrier_name_other cannot be null');
        }
        if ((mb_strlen($carrier_name_other) > 64)) {
            throw new \InvalidArgumentException('invalid length for $carrier_name_other when calling ShipmentTracker., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($carrier_name_other) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carrier_name_other when calling ShipmentTracker., must be bigger than or equal to 1.');
        }

        $this->container['carrier_name_other'] = $carrier_name_other;

        return $this;
    }

    /**
     * Gets postage_payment_id
     *
     * @return string|null
     */
    public function getPostagePaymentId()
    {
        return $this->container['postage_payment_id'];
    }

    /**
     * Sets postage_payment_id
     *
     * @param string|null $postage_payment_id The postage payment ID. This property supports Unicode.
     *
     * @return self
     */
    public function setPostagePaymentId($postage_payment_id)
    {
        if (is_null($postage_payment_id)) {
            throw new \InvalidArgumentException('non-nullable postage_payment_id cannot be null');
        }
        if ((mb_strlen($postage_payment_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $postage_payment_id when calling ShipmentTracker., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($postage_payment_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $postage_payment_id when calling ShipmentTracker., must be bigger than or equal to 1.');
        }

        $this->container['postage_payment_id'] = $postage_payment_id;

        return $this;
    }

    /**
     * Gets notify_buyer
     *
     * @return bool|null
     */
    public function getNotifyBuyer()
    {
        return $this->container['notify_buyer'];
    }

    /**
     * Sets notify_buyer
     *
     * @param bool|null $notify_buyer If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
     *
     * @return self
     */
    public function setNotifyBuyer($notify_buyer)
    {
        if (is_null($notify_buyer)) {
            throw new \InvalidArgumentException('non-nullable notify_buyer cannot be null');
        }
        $this->container['notify_buyer'] = $notify_buyer;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of items shipped.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity > 100)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ShipmentTracker., must be smaller than or equal to 100.');
        }
        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ShipmentTracker., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tracking_number_validated
     *
     * @return bool|null
     */
    public function getTrackingNumberValidated()
    {
        return $this->container['tracking_number_validated'];
    }

    /**
     * Sets tracking_number_validated
     *
     * @param bool|null $tracking_number_validated Indicates whether the carrier validated the tracking number.
     *
     * @return self
     */
    public function setTrackingNumberValidated($tracking_number_validated)
    {
        if (is_null($tracking_number_validated)) {
            throw new \InvalidArgumentException('non-nullable tracking_number_validated cannot be null');
        }
        $this->container['tracking_number_validated'] = $tracking_number_validated;

        return $this;
    }

    /**
     * Gets last_updated_time
     *
     * @return string|null
     */
    public function getLastUpdatedTime()
    {
        return $this->container['last_updated_time'];
    }

    /**
     * Sets last_updated_time
     *
     * @param string|null $last_updated_time The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
     *
     * @return self
     */
    public function setLastUpdatedTime($last_updated_time)
    {
        if (is_null($last_updated_time)) {
            throw new \InvalidArgumentException('non-nullable last_updated_time cannot be null');
        }
        if ((mb_strlen($last_updated_time) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_updated_time when calling ShipmentTracker., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($last_updated_time) < 20)) {
            throw new \InvalidArgumentException('invalid length for $last_updated_time when calling ShipmentTracker., must be bigger than or equal to 20.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $last_updated_time))) {
            throw new \InvalidArgumentException("invalid value for \$last_updated_time when calling ShipmentTracker., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.");
        }

        $this->container['last_updated_time'] = $last_updated_time;

        return $this;
    }

    /**
     * Gets shipment_direction
     *
     * @return string|null
     */
    public function getShipmentDirection()
    {
        return $this->container['shipment_direction'];
    }

    /**
     * Sets shipment_direction
     *
     * @param string|null $shipment_direction To denote whether the shipment is sent forward to the receiver or returned back.
     *
     * @return self
     */
    public function setShipmentDirection($shipment_direction)
    {
        if (is_null($shipment_direction)) {
            throw new \InvalidArgumentException('non-nullable shipment_direction cannot be null');
        }
        $allowedValues = $this->getShipmentDirectionAllowableValues();
        if (!in_array($shipment_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_direction', must be one of '%s'",
                    $shipment_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($shipment_direction) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipment_direction when calling ShipmentTracker., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($shipment_direction) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipment_direction when calling ShipmentTracker., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9A-Z_]+$/", $shipment_direction))) {
            throw new \InvalidArgumentException("invalid value for \$shipment_direction when calling ShipmentTracker., must conform to the pattern /^[0-9A-Z_]+$/.");
        }

        $this->container['shipment_direction'] = $shipment_direction;

        return $this;
    }

    /**
     * Gets shipment_uploader
     *
     * @return string|null
     */
    public function getShipmentUploader()
    {
        return $this->container['shipment_uploader'];
    }

    /**
     * Sets shipment_uploader
     *
     * @param string|null $shipment_uploader To denote which party uploaded the shipment tracking info.
     *
     * @return self
     */
    public function setShipmentUploader($shipment_uploader)
    {
        if (is_null($shipment_uploader)) {
            throw new \InvalidArgumentException('non-nullable shipment_uploader cannot be null');
        }
        $allowedValues = $this->getShipmentUploaderAllowableValues();
        if (!in_array($shipment_uploader, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_uploader', must be one of '%s'",
                    $shipment_uploader,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($shipment_uploader) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipment_uploader when calling ShipmentTracker., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($shipment_uploader) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipment_uploader when calling ShipmentTracker., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9A-Z_]+$/", $shipment_uploader))) {
            throw new \InvalidArgumentException("invalid value for \$shipment_uploader when calling ShipmentTracker., must conform to the pattern /^[0-9A-Z_]+$/.");
        }

        $this->container['shipment_uploader'] = $shipment_uploader;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


