<?php
/**
 * PaymentSourceResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentSourceResponse Class Doc Comment
 *
 * @category Class
 * @description The payment source used to fund the payment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSourceResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment_source_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card' => '\OpenAPI\Client\Model\CardResponse',
        'paypal' => '\OpenAPI\Client\Model\PaypalWalletResponse',
        'bancontact' => '\OpenAPI\Client\Model\Bancontact',
        'blik' => '\OpenAPI\Client\Model\Blik',
        'eps' => '\OpenAPI\Client\Model\Eps',
        'giropay' => '\OpenAPI\Client\Model\Giropay',
        'ideal' => '\OpenAPI\Client\Model\Ideal',
        'mybank' => '\OpenAPI\Client\Model\Mybank',
        'p24' => '\OpenAPI\Client\Model\P24',
        'sofort' => '\OpenAPI\Client\Model\Sofort',
        'trustly' => '\OpenAPI\Client\Model\Trustly',
        'venmo' => '\OpenAPI\Client\Model\VenmoWalletResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card' => null,
        'paypal' => null,
        'bancontact' => null,
        'blik' => null,
        'eps' => null,
        'giropay' => null,
        'ideal' => null,
        'mybank' => null,
        'p24' => null,
        'sofort' => null,
        'trustly' => null,
        'venmo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'card' => false,
		'paypal' => false,
		'bancontact' => false,
		'blik' => false,
		'eps' => false,
		'giropay' => false,
		'ideal' => false,
		'mybank' => false,
		'p24' => false,
		'sofort' => false,
		'trustly' => false,
		'venmo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card' => 'card',
        'paypal' => 'paypal',
        'bancontact' => 'bancontact',
        'blik' => 'blik',
        'eps' => 'eps',
        'giropay' => 'giropay',
        'ideal' => 'ideal',
        'mybank' => 'mybank',
        'p24' => 'p24',
        'sofort' => 'sofort',
        'trustly' => 'trustly',
        'venmo' => 'venmo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card' => 'setCard',
        'paypal' => 'setPaypal',
        'bancontact' => 'setBancontact',
        'blik' => 'setBlik',
        'eps' => 'setEps',
        'giropay' => 'setGiropay',
        'ideal' => 'setIdeal',
        'mybank' => 'setMybank',
        'p24' => 'setP24',
        'sofort' => 'setSofort',
        'trustly' => 'setTrustly',
        'venmo' => 'setVenmo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card' => 'getCard',
        'paypal' => 'getPaypal',
        'bancontact' => 'getBancontact',
        'blik' => 'getBlik',
        'eps' => 'getEps',
        'giropay' => 'getGiropay',
        'ideal' => 'getIdeal',
        'mybank' => 'getMybank',
        'p24' => 'getP24',
        'sofort' => 'getSofort',
        'trustly' => 'getTrustly',
        'venmo' => 'getVenmo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('paypal', $data ?? [], null);
        $this->setIfExists('bancontact', $data ?? [], null);
        $this->setIfExists('blik', $data ?? [], null);
        $this->setIfExists('eps', $data ?? [], null);
        $this->setIfExists('giropay', $data ?? [], null);
        $this->setIfExists('ideal', $data ?? [], null);
        $this->setIfExists('mybank', $data ?? [], null);
        $this->setIfExists('p24', $data ?? [], null);
        $this->setIfExists('sofort', $data ?? [], null);
        $this->setIfExists('trustly', $data ?? [], null);
        $this->setIfExists('venmo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card
     *
     * @return \OpenAPI\Client\Model\CardResponse|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \OpenAPI\Client\Model\CardResponse|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets paypal
     *
     * @return \OpenAPI\Client\Model\PaypalWalletResponse|null
     */
    public function getPaypal()
    {
        return $this->container['paypal'];
    }

    /**
     * Sets paypal
     *
     * @param \OpenAPI\Client\Model\PaypalWalletResponse|null $paypal paypal
     *
     * @return self
     */
    public function setPaypal($paypal)
    {
        if (is_null($paypal)) {
            throw new \InvalidArgumentException('non-nullable paypal cannot be null');
        }
        $this->container['paypal'] = $paypal;

        return $this;
    }

    /**
     * Gets bancontact
     *
     * @return \OpenAPI\Client\Model\Bancontact|null
     */
    public function getBancontact()
    {
        return $this->container['bancontact'];
    }

    /**
     * Sets bancontact
     *
     * @param \OpenAPI\Client\Model\Bancontact|null $bancontact bancontact
     *
     * @return self
     */
    public function setBancontact($bancontact)
    {
        if (is_null($bancontact)) {
            throw new \InvalidArgumentException('non-nullable bancontact cannot be null');
        }
        $this->container['bancontact'] = $bancontact;

        return $this;
    }

    /**
     * Gets blik
     *
     * @return \OpenAPI\Client\Model\Blik|null
     */
    public function getBlik()
    {
        return $this->container['blik'];
    }

    /**
     * Sets blik
     *
     * @param \OpenAPI\Client\Model\Blik|null $blik blik
     *
     * @return self
     */
    public function setBlik($blik)
    {
        if (is_null($blik)) {
            throw new \InvalidArgumentException('non-nullable blik cannot be null');
        }
        $this->container['blik'] = $blik;

        return $this;
    }

    /**
     * Gets eps
     *
     * @return \OpenAPI\Client\Model\Eps|null
     */
    public function getEps()
    {
        return $this->container['eps'];
    }

    /**
     * Sets eps
     *
     * @param \OpenAPI\Client\Model\Eps|null $eps eps
     *
     * @return self
     */
    public function setEps($eps)
    {
        if (is_null($eps)) {
            throw new \InvalidArgumentException('non-nullable eps cannot be null');
        }
        $this->container['eps'] = $eps;

        return $this;
    }

    /**
     * Gets giropay
     *
     * @return \OpenAPI\Client\Model\Giropay|null
     */
    public function getGiropay()
    {
        return $this->container['giropay'];
    }

    /**
     * Sets giropay
     *
     * @param \OpenAPI\Client\Model\Giropay|null $giropay giropay
     *
     * @return self
     */
    public function setGiropay($giropay)
    {
        if (is_null($giropay)) {
            throw new \InvalidArgumentException('non-nullable giropay cannot be null');
        }
        $this->container['giropay'] = $giropay;

        return $this;
    }

    /**
     * Gets ideal
     *
     * @return \OpenAPI\Client\Model\Ideal|null
     */
    public function getIdeal()
    {
        return $this->container['ideal'];
    }

    /**
     * Sets ideal
     *
     * @param \OpenAPI\Client\Model\Ideal|null $ideal ideal
     *
     * @return self
     */
    public function setIdeal($ideal)
    {
        if (is_null($ideal)) {
            throw new \InvalidArgumentException('non-nullable ideal cannot be null');
        }
        $this->container['ideal'] = $ideal;

        return $this;
    }

    /**
     * Gets mybank
     *
     * @return \OpenAPI\Client\Model\Mybank|null
     */
    public function getMybank()
    {
        return $this->container['mybank'];
    }

    /**
     * Sets mybank
     *
     * @param \OpenAPI\Client\Model\Mybank|null $mybank mybank
     *
     * @return self
     */
    public function setMybank($mybank)
    {
        if (is_null($mybank)) {
            throw new \InvalidArgumentException('non-nullable mybank cannot be null');
        }
        $this->container['mybank'] = $mybank;

        return $this;
    }

    /**
     * Gets p24
     *
     * @return \OpenAPI\Client\Model\P24|null
     */
    public function getP24()
    {
        return $this->container['p24'];
    }

    /**
     * Sets p24
     *
     * @param \OpenAPI\Client\Model\P24|null $p24 p24
     *
     * @return self
     */
    public function setP24($p24)
    {
        if (is_null($p24)) {
            throw new \InvalidArgumentException('non-nullable p24 cannot be null');
        }
        $this->container['p24'] = $p24;

        return $this;
    }

    /**
     * Gets sofort
     *
     * @return \OpenAPI\Client\Model\Sofort|null
     */
    public function getSofort()
    {
        return $this->container['sofort'];
    }

    /**
     * Sets sofort
     *
     * @param \OpenAPI\Client\Model\Sofort|null $sofort sofort
     *
     * @return self
     */
    public function setSofort($sofort)
    {
        if (is_null($sofort)) {
            throw new \InvalidArgumentException('non-nullable sofort cannot be null');
        }
        $this->container['sofort'] = $sofort;

        return $this;
    }

    /**
     * Gets trustly
     *
     * @return \OpenAPI\Client\Model\Trustly|null
     */
    public function getTrustly()
    {
        return $this->container['trustly'];
    }

    /**
     * Sets trustly
     *
     * @param \OpenAPI\Client\Model\Trustly|null $trustly trustly
     *
     * @return self
     */
    public function setTrustly($trustly)
    {
        if (is_null($trustly)) {
            throw new \InvalidArgumentException('non-nullable trustly cannot be null');
        }
        $this->container['trustly'] = $trustly;

        return $this;
    }

    /**
     * Gets venmo
     *
     * @return \OpenAPI\Client\Model\VenmoWalletResponse|null
     */
    public function getVenmo()
    {
        return $this->container['venmo'];
    }

    /**
     * Sets venmo
     *
     * @param \OpenAPI\Client\Model\VenmoWalletResponse|null $venmo venmo
     *
     * @return self
     */
    public function setVenmo($venmo)
    {
        if (is_null($venmo)) {
            throw new \InvalidArgumentException('non-nullable venmo cannot be null');
        }
        $this->container['venmo'] = $venmo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


