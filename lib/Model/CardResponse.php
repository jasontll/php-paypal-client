<?php
/**
 * CardResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardResponse Class Doc Comment
 *
 * @category Class
 * @description The payment card to use to fund a payment. Card can be a credit or debit card.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'last_digits' => 'string',
        'brand' => '\OpenAPI\Client\Model\CardBrand',
        'available_networks' => '\OpenAPI\Client\Model\CardBrand[]',
        'type' => 'string',
        'authentication_result' => '\OpenAPI\Client\Model\AuthenticationResponse',
        'attributes' => '\OpenAPI\Client\Model\CardAttributesResponse',
        'from_request' => '\OpenAPI\Client\Model\CardFromRequest',
        'expiry' => 'string',
        'bin_details' => '\OpenAPI\Client\Model\BinDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'last_digits' => null,
        'brand' => null,
        'available_networks' => null,
        'type' => null,
        'authentication_result' => null,
        'attributes' => null,
        'from_request' => null,
        'expiry' => null,
        'bin_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'last_digits' => false,
		'brand' => false,
		'available_networks' => false,
		'type' => false,
		'authentication_result' => false,
		'attributes' => false,
		'from_request' => false,
		'expiry' => false,
		'bin_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'last_digits' => 'last_digits',
        'brand' => 'brand',
        'available_networks' => 'available_networks',
        'type' => 'type',
        'authentication_result' => 'authentication_result',
        'attributes' => 'attributes',
        'from_request' => 'from_request',
        'expiry' => 'expiry',
        'bin_details' => 'bin_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'last_digits' => 'setLastDigits',
        'brand' => 'setBrand',
        'available_networks' => 'setAvailableNetworks',
        'type' => 'setType',
        'authentication_result' => 'setAuthenticationResult',
        'attributes' => 'setAttributes',
        'from_request' => 'setFromRequest',
        'expiry' => 'setExpiry',
        'bin_details' => 'setBinDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'last_digits' => 'getLastDigits',
        'brand' => 'getBrand',
        'available_networks' => 'getAvailableNetworks',
        'type' => 'getType',
        'authentication_result' => 'getAuthenticationResult',
        'attributes' => 'getAttributes',
        'from_request' => 'getFromRequest',
        'expiry' => 'getExpiry',
        'bin_details' => 'getBinDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CREDIT = 'CREDIT';
    public const TYPE_DEBIT = 'DEBIT';
    public const TYPE_PREPAID = 'PREPAID';
    public const TYPE_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDIT,
            self::TYPE_DEBIT,
            self::TYPE_PREPAID,
            self::TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('last_digits', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('available_networks', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('authentication_result', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('from_request', $data ?? [], null);
        $this->setIfExists('expiry', $data ?? [], null);
        $this->setIfExists('bin_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 300)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 2)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['last_digits']) && !preg_match("/[0-9]{2,}/", $this->container['last_digits'])) {
            $invalidProperties[] = "invalid value for 'last_digits', must be conform to the pattern /[0-9]{2,}/.";
        }

        if (!is_null($this->container['available_networks']) && (count($this->container['available_networks']) > 256)) {
            $invalidProperties[] = "invalid value for 'available_networks', number of items must be less than or equal to 256.";
        }

        if (!is_null($this->container['available_networks']) && (count($this->container['available_networks']) < 1)) {
            $invalidProperties[] = "invalid value for 'available_networks', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['expiry']) && (mb_strlen($this->container['expiry']) > 7)) {
            $invalidProperties[] = "invalid value for 'expiry', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['expiry']) && (mb_strlen($this->container['expiry']) < 7)) {
            $invalidProperties[] = "invalid value for 'expiry', the character length must be bigger than or equal to 7.";
        }

        if (!is_null($this->container['expiry']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/", $this->container['expiry'])) {
            $invalidProperties[] = "invalid value for 'expiry', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The card holder's name as it appears on the card.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CardResponse., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CardResponse., must be bigger than or equal to 2.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_digits
     *
     * @return string|null
     */
    public function getLastDigits()
    {
        return $this->container['last_digits'];
    }

    /**
     * Sets last_digits
     *
     * @param string|null $last_digits The last digits of the payment card.
     *
     * @return self
     */
    public function setLastDigits($last_digits)
    {
        if (is_null($last_digits)) {
            throw new \InvalidArgumentException('non-nullable last_digits cannot be null');
        }

        if ((!preg_match("/[0-9]{2,}/", $last_digits))) {
            throw new \InvalidArgumentException("invalid value for \$last_digits when calling CardResponse., must conform to the pattern /[0-9]{2,}/.");
        }

        $this->container['last_digits'] = $last_digits;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return \OpenAPI\Client\Model\CardBrand|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param \OpenAPI\Client\Model\CardBrand|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets available_networks
     *
     * @return \OpenAPI\Client\Model\CardBrand[]|null
     */
    public function getAvailableNetworks()
    {
        return $this->container['available_networks'];
    }

    /**
     * Sets available_networks
     *
     * @param \OpenAPI\Client\Model\CardBrand[]|null $available_networks Array of brands or networks associated with the card.
     *
     * @return self
     */
    public function setAvailableNetworks($available_networks)
    {
        if (is_null($available_networks)) {
            throw new \InvalidArgumentException('non-nullable available_networks cannot be null');
        }

        if ((count($available_networks) > 256)) {
            throw new \InvalidArgumentException('invalid value for $available_networks when calling CardResponse., number of items must be less than or equal to 256.');
        }
        if ((count($available_networks) < 1)) {
            throw new \InvalidArgumentException('invalid length for $available_networks when calling CardResponse., number of items must be greater than or equal to 1.');
        }
        $this->container['available_networks'] = $available_networks;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The payment card type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets authentication_result
     *
     * @return \OpenAPI\Client\Model\AuthenticationResponse|null
     */
    public function getAuthenticationResult()
    {
        return $this->container['authentication_result'];
    }

    /**
     * Sets authentication_result
     *
     * @param \OpenAPI\Client\Model\AuthenticationResponse|null $authentication_result authentication_result
     *
     * @return self
     */
    public function setAuthenticationResult($authentication_result)
    {
        if (is_null($authentication_result)) {
            throw new \InvalidArgumentException('non-nullable authentication_result cannot be null');
        }
        $this->container['authentication_result'] = $authentication_result;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\CardAttributesResponse|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\CardAttributesResponse|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets from_request
     *
     * @return \OpenAPI\Client\Model\CardFromRequest|null
     */
    public function getFromRequest()
    {
        return $this->container['from_request'];
    }

    /**
     * Sets from_request
     *
     * @param \OpenAPI\Client\Model\CardFromRequest|null $from_request from_request
     *
     * @return self
     */
    public function setFromRequest($from_request)
    {
        if (is_null($from_request)) {
            throw new \InvalidArgumentException('non-nullable from_request cannot be null');
        }
        $this->container['from_request'] = $from_request;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string|null
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string|null $expiry The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
     *
     * @return self
     */
    public function setExpiry($expiry)
    {
        if (is_null($expiry)) {
            throw new \InvalidArgumentException('non-nullable expiry cannot be null');
        }
        if ((mb_strlen($expiry) > 7)) {
            throw new \InvalidArgumentException('invalid length for $expiry when calling CardResponse., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($expiry) < 7)) {
            throw new \InvalidArgumentException('invalid length for $expiry when calling CardResponse., must be bigger than or equal to 7.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])$/", $expiry))) {
            throw new \InvalidArgumentException("invalid value for \$expiry when calling CardResponse., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])$/.");
        }

        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets bin_details
     *
     * @return \OpenAPI\Client\Model\BinDetails|null
     */
    public function getBinDetails()
    {
        return $this->container['bin_details'];
    }

    /**
     * Sets bin_details
     *
     * @param \OpenAPI\Client\Model\BinDetails|null $bin_details bin_details
     *
     * @return self
     */
    public function setBinDetails($bin_details)
    {
        if (is_null($bin_details)) {
            throw new \InvalidArgumentException('non-nullable bin_details cannot be null');
        }
        $this->container['bin_details'] = $bin_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


