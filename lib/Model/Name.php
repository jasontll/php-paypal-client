<?php
/**
 * Name
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Name Class Doc Comment
 *
 * @category Class
 * @description The name of the party.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Name implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'name';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prefix' => 'string',
        'given_name' => 'string',
        'surname' => 'string',
        'middle_name' => 'string',
        'suffix' => 'string',
        'alternate_full_name' => 'string',
        'full_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prefix' => null,
        'given_name' => null,
        'surname' => null,
        'middle_name' => null,
        'suffix' => null,
        'alternate_full_name' => null,
        'full_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'prefix' => false,
		'given_name' => false,
		'surname' => false,
		'middle_name' => false,
		'suffix' => false,
		'alternate_full_name' => false,
		'full_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prefix' => 'prefix',
        'given_name' => 'given_name',
        'surname' => 'surname',
        'middle_name' => 'middle_name',
        'suffix' => 'suffix',
        'alternate_full_name' => 'alternate_full_name',
        'full_name' => 'full_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prefix' => 'setPrefix',
        'given_name' => 'setGivenName',
        'surname' => 'setSurname',
        'middle_name' => 'setMiddleName',
        'suffix' => 'setSuffix',
        'alternate_full_name' => 'setAlternateFullName',
        'full_name' => 'setFullName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prefix' => 'getPrefix',
        'given_name' => 'getGivenName',
        'surname' => 'getSurname',
        'middle_name' => 'getMiddleName',
        'suffix' => 'getSuffix',
        'alternate_full_name' => 'getAlternateFullName',
        'full_name' => 'getFullName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('given_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('alternate_full_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['prefix']) && (mb_strlen($this->container['prefix']) > 140)) {
            $invalidProperties[] = "invalid value for 'prefix', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['given_name']) && (mb_strlen($this->container['given_name']) > 140)) {
            $invalidProperties[] = "invalid value for 'given_name', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['surname']) && (mb_strlen($this->container['surname']) > 140)) {
            $invalidProperties[] = "invalid value for 'surname', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 140)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['suffix']) && (mb_strlen($this->container['suffix']) > 140)) {
            $invalidProperties[] = "invalid value for 'suffix', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['alternate_full_name']) && (mb_strlen($this->container['alternate_full_name']) > 300)) {
            $invalidProperties[] = "invalid value for 'alternate_full_name', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) > 300)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be smaller than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix, or title, to the party's name.
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        if ((mb_strlen($prefix) > 140)) {
            throw new \InvalidArgumentException('invalid length for $prefix when calling Name., must be smaller than or equal to 140.');
        }

        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name When the party is a person, the party's given, or first, name.
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        if (is_null($given_name)) {
            throw new \InvalidArgumentException('non-nullable given_name cannot be null');
        }
        if ((mb_strlen($given_name) > 140)) {
            throw new \InvalidArgumentException('invalid length for $given_name when calling Name., must be smaller than or equal to 140.');
        }

        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        if ((mb_strlen($surname) > 140)) {
            throw new \InvalidArgumentException('invalid length for $surname when calling Name., must be smaller than or equal to 140.');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        if ((mb_strlen($middle_name) > 140)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling Name., must be smaller than or equal to 140.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix for the party's name.
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        if ((mb_strlen($suffix) > 140)) {
            throw new \InvalidArgumentException('invalid length for $suffix when calling Name., must be smaller than or equal to 140.');
        }

        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets alternate_full_name
     *
     * @return string|null
     */
    public function getAlternateFullName()
    {
        return $this->container['alternate_full_name'];
    }

    /**
     * Sets alternate_full_name
     *
     * @param string|null $alternate_full_name DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
     *
     * @return self
     */
    public function setAlternateFullName($alternate_full_name)
    {
        if (is_null($alternate_full_name)) {
            throw new \InvalidArgumentException('non-nullable alternate_full_name cannot be null');
        }
        if ((mb_strlen($alternate_full_name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $alternate_full_name when calling Name., must be smaller than or equal to 300.');
        }

        $this->container['alternate_full_name'] = $alternate_full_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name When the party is a person, the party's full name.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        if ((mb_strlen($full_name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling Name., must be smaller than or equal to 300.');
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


