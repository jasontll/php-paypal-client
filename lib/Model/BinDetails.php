<?php
/**
 * BinDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BinDetails Class Doc Comment
 *
 * @category Class
 * @description Bank Identification Number (BIN) details used to fund a payment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BinDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'bin_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bin' => 'string',
        'issuing_bank' => 'string',
        'bin_country_code' => 'string',
        'products' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bin' => null,
        'issuing_bank' => null,
        'bin_country_code' => 'ppaas_common_country_code_v2',
        'products' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bin' => false,
		'issuing_bank' => false,
		'bin_country_code' => false,
		'products' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bin' => 'bin',
        'issuing_bank' => 'issuing_bank',
        'bin_country_code' => 'bin_country_code',
        'products' => 'products'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bin' => 'setBin',
        'issuing_bank' => 'setIssuingBank',
        'bin_country_code' => 'setBinCountryCode',
        'products' => 'setProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bin' => 'getBin',
        'issuing_bank' => 'getIssuingBank',
        'bin_country_code' => 'getBinCountryCode',
        'products' => 'getProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bin', $data ?? [], null);
        $this->setIfExists('issuing_bank', $data ?? [], null);
        $this->setIfExists('bin_country_code', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bin']) && (mb_strlen($this->container['bin']) > 25)) {
            $invalidProperties[] = "invalid value for 'bin', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['bin']) && (mb_strlen($this->container['bin']) < 1)) {
            $invalidProperties[] = "invalid value for 'bin', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bin']) && !preg_match("/^[0-9]+$/", $this->container['bin'])) {
            $invalidProperties[] = "invalid value for 'bin', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['issuing_bank']) && (mb_strlen($this->container['issuing_bank']) > 64)) {
            $invalidProperties[] = "invalid value for 'issuing_bank', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['issuing_bank']) && (mb_strlen($this->container['issuing_bank']) < 1)) {
            $invalidProperties[] = "invalid value for 'issuing_bank', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bin_country_code']) && (mb_strlen($this->container['bin_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'bin_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bin_country_code']) && (mb_strlen($this->container['bin_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'bin_country_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['bin_country_code']) && !preg_match("/^([A-Z]{2}|C2)$/", $this->container['bin_country_code'])) {
            $invalidProperties[] = "invalid value for 'bin_country_code', must be conform to the pattern /^([A-Z]{2}|C2)$/.";
        }

        if (!is_null($this->container['products']) && (count($this->container['products']) > 256)) {
            $invalidProperties[] = "invalid value for 'products', number of items must be less than or equal to 256.";
        }

        if (!is_null($this->container['products']) && (count($this->container['products']) < 1)) {
            $invalidProperties[] = "invalid value for 'products', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin The Bank Identification Number (BIN) signifies the number that is being used to identify the granular level details (except the PII information) of the card.
     *
     * @return self
     */
    public function setBin($bin)
    {
        if (is_null($bin)) {
            throw new \InvalidArgumentException('non-nullable bin cannot be null');
        }
        if ((mb_strlen($bin) > 25)) {
            throw new \InvalidArgumentException('invalid length for $bin when calling BinDetails., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($bin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bin when calling BinDetails., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9]+$/", $bin))) {
            throw new \InvalidArgumentException("invalid value for \$bin when calling BinDetails., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets issuing_bank
     *
     * @return string|null
     */
    public function getIssuingBank()
    {
        return $this->container['issuing_bank'];
    }

    /**
     * Sets issuing_bank
     *
     * @param string|null $issuing_bank The issuer of the card instrument.
     *
     * @return self
     */
    public function setIssuingBank($issuing_bank)
    {
        if (is_null($issuing_bank)) {
            throw new \InvalidArgumentException('non-nullable issuing_bank cannot be null');
        }
        if ((mb_strlen($issuing_bank) > 64)) {
            throw new \InvalidArgumentException('invalid length for $issuing_bank when calling BinDetails., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($issuing_bank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $issuing_bank when calling BinDetails., must be bigger than or equal to 1.');
        }

        $this->container['issuing_bank'] = $issuing_bank;

        return $this;
    }

    /**
     * Gets bin_country_code
     *
     * @return string|null
     */
    public function getBinCountryCode()
    {
        return $this->container['bin_country_code'];
    }

    /**
     * Sets bin_country_code
     *
     * @param string|null $bin_country_code The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
     *
     * @return self
     */
    public function setBinCountryCode($bin_country_code)
    {
        if (is_null($bin_country_code)) {
            throw new \InvalidArgumentException('non-nullable bin_country_code cannot be null');
        }
        if ((mb_strlen($bin_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bin_country_code when calling BinDetails., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($bin_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $bin_country_code when calling BinDetails., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^([A-Z]{2}|C2)$/", $bin_country_code))) {
            throw new \InvalidArgumentException("invalid value for \$bin_country_code when calling BinDetails., must conform to the pattern /^([A-Z]{2}|C2)$/.");
        }

        $this->container['bin_country_code'] = $bin_country_code;

        return $this;
    }

    /**
     * Gets products
     *
     * @return string[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param string[]|null $products The type of card product assigned to the BIN by the issuer. These values are defined by the issuer and may change over time. Some examples include: PREPAID_GIFT, CONSUMER, CORPORATE.
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }

        if ((count($products) > 256)) {
            throw new \InvalidArgumentException('invalid value for $products when calling BinDetails., number of items must be less than or equal to 256.');
        }
        if ((count($products) < 1)) {
            throw new \InvalidArgumentException('invalid length for $products when calling BinDetails., number of items must be greater than or equal to 1.');
        }
        $this->container['products'] = $products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


