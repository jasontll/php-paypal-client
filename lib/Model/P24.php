<?php
/**
 * P24
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * P24 Class Doc Comment
 *
 * @category Class
 * @description Information used to pay using P24(Przelewy24).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class P24 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'p24';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'email' => 'string',
        'country_code' => 'string',
        'payment_descriptor' => 'string',
        'method_id' => 'string',
        'method_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'email' => 'ppaas_common_email_address_v2',
        'country_code' => 'ppaas_common_country_code_v2',
        'payment_descriptor' => null,
        'method_id' => null,
        'method_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'email' => false,
		'country_code' => false,
		'payment_descriptor' => false,
		'method_id' => false,
		'method_description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'country_code' => 'country_code',
        'payment_descriptor' => 'payment_descriptor',
        'method_id' => 'method_id',
        'method_description' => 'method_description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'country_code' => 'setCountryCode',
        'payment_descriptor' => 'setPaymentDescriptor',
        'method_id' => 'setMethodId',
        'method_description' => 'setMethodDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'country_code' => 'getCountryCode',
        'payment_descriptor' => 'getPaymentDescriptor',
        'method_id' => 'getMethodId',
        'method_description' => 'getMethodDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('payment_descriptor', $data ?? [], null);
        $this->setIfExists('method_id', $data ?? [], null);
        $this->setIfExists('method_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 300)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 3)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 3)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['email']) && !preg_match("/^.+@[^\"\\-].+$/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /^.+@[^\"\\-].+$/.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['country_code']) && !preg_match("/^([A-Z]{2}|C2)$/", $this->container['country_code'])) {
            $invalidProperties[] = "invalid value for 'country_code', must be conform to the pattern /^([A-Z]{2}|C2)$/.";
        }

        if (!is_null($this->container['payment_descriptor']) && (mb_strlen($this->container['payment_descriptor']) > 2000)) {
            $invalidProperties[] = "invalid value for 'payment_descriptor', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['payment_descriptor']) && (mb_strlen($this->container['payment_descriptor']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_descriptor', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['method_id']) && (mb_strlen($this->container['method_id']) > 300)) {
            $invalidProperties[] = "invalid value for 'method_id', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['method_id']) && (mb_strlen($this->container['method_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'method_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['method_description']) && (mb_strlen($this->container['method_description']) > 2000)) {
            $invalidProperties[] = "invalid value for 'method_description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['method_description']) && (mb_strlen($this->container['method_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'method_description', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The full name representation like Mr J Smith.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 300)) {
            throw new \InvalidArgumentException('invalid length for $name when calling P24., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($name) < 3)) {
            throw new \InvalidArgumentException('invalid length for $name when calling P24., must be bigger than or equal to 3.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling P24., must be smaller than or equal to 254.');
        }
        if ((mb_strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling P24., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^.+@[^\"\\-].+$/", $email))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling P24., must conform to the pattern /^.+@[^\"\\-].+$/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling P24., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling P24., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^([A-Z]{2}|C2)$/", $country_code))) {
            throw new \InvalidArgumentException("invalid value for \$country_code when calling P24., must conform to the pattern /^([A-Z]{2}|C2)$/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets payment_descriptor
     *
     * @return string|null
     */
    public function getPaymentDescriptor()
    {
        return $this->container['payment_descriptor'];
    }

    /**
     * Sets payment_descriptor
     *
     * @param string|null $payment_descriptor P24 generated payment description.
     *
     * @return self
     */
    public function setPaymentDescriptor($payment_descriptor)
    {
        if (is_null($payment_descriptor)) {
            throw new \InvalidArgumentException('non-nullable payment_descriptor cannot be null');
        }
        if ((mb_strlen($payment_descriptor) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $payment_descriptor when calling P24., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($payment_descriptor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_descriptor when calling P24., must be bigger than or equal to 1.');
        }

        $this->container['payment_descriptor'] = $payment_descriptor;

        return $this;
    }

    /**
     * Gets method_id
     *
     * @return string|null
     */
    public function getMethodId()
    {
        return $this->container['method_id'];
    }

    /**
     * Sets method_id
     *
     * @param string|null $method_id Numeric identifier of the payment scheme or bank used for the payment.
     *
     * @return self
     */
    public function setMethodId($method_id)
    {
        if (is_null($method_id)) {
            throw new \InvalidArgumentException('non-nullable method_id cannot be null');
        }
        if ((mb_strlen($method_id) > 300)) {
            throw new \InvalidArgumentException('invalid length for $method_id when calling P24., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($method_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $method_id when calling P24., must be bigger than or equal to 1.');
        }

        $this->container['method_id'] = $method_id;

        return $this;
    }

    /**
     * Gets method_description
     *
     * @return string|null
     */
    public function getMethodDescription()
    {
        return $this->container['method_description'];
    }

    /**
     * Sets method_description
     *
     * @param string|null $method_description Friendly name of the payment scheme or bank used for the payment.
     *
     * @return self
     */
    public function setMethodDescription($method_description)
    {
        if (is_null($method_description)) {
            throw new \InvalidArgumentException('non-nullable method_description cannot be null');
        }
        if ((mb_strlen($method_description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $method_description when calling P24., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($method_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $method_description when calling P24., must be bigger than or equal to 1.');
        }

        $this->container['method_description'] = $method_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


