<?php
/**
 * AddressPortable
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AddressPortable Class Doc Comment
 *
 * @category Class
 * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddressPortable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'address_portable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_line_1' => 'string',
        'address_line_2' => 'string',
        'address_line_3' => 'string',
        'admin_area_4' => 'string',
        'admin_area_3' => 'string',
        'admin_area_2' => 'string',
        'admin_area_1' => 'string',
        'postal_code' => 'string',
        'country_code' => 'string',
        'address_details' => '\OpenAPI\Client\Model\AddressDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_line_1' => null,
        'address_line_2' => null,
        'address_line_3' => null,
        'admin_area_4' => null,
        'admin_area_3' => null,
        'admin_area_2' => null,
        'admin_area_1' => null,
        'postal_code' => null,
        'country_code' => 'ppaas_common_country_code_v2',
        'address_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_line_1' => false,
		'address_line_2' => false,
		'address_line_3' => false,
		'admin_area_4' => false,
		'admin_area_3' => false,
		'admin_area_2' => false,
		'admin_area_1' => false,
		'postal_code' => false,
		'country_code' => false,
		'address_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'address_line_3' => 'address_line_3',
        'admin_area_4' => 'admin_area_4',
        'admin_area_3' => 'admin_area_3',
        'admin_area_2' => 'admin_area_2',
        'admin_area_1' => 'admin_area_1',
        'postal_code' => 'postal_code',
        'country_code' => 'country_code',
        'address_details' => 'address_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'address_line_3' => 'setAddressLine3',
        'admin_area_4' => 'setAdminArea4',
        'admin_area_3' => 'setAdminArea3',
        'admin_area_2' => 'setAdminArea2',
        'admin_area_1' => 'setAdminArea1',
        'postal_code' => 'setPostalCode',
        'country_code' => 'setCountryCode',
        'address_details' => 'setAddressDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'address_line_3' => 'getAddressLine3',
        'admin_area_4' => 'getAdminArea4',
        'admin_area_3' => 'getAdminArea3',
        'admin_area_2' => 'getAdminArea2',
        'admin_area_1' => 'getAdminArea1',
        'postal_code' => 'getPostalCode',
        'country_code' => 'getCountryCode',
        'address_details' => 'getAddressDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_line_1', $data ?? [], null);
        $this->setIfExists('address_line_2', $data ?? [], null);
        $this->setIfExists('address_line_3', $data ?? [], null);
        $this->setIfExists('admin_area_4', $data ?? [], null);
        $this->setIfExists('admin_area_3', $data ?? [], null);
        $this->setIfExists('admin_area_2', $data ?? [], null);
        $this->setIfExists('admin_area_1', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('address_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address_line_1']) && (mb_strlen($this->container['address_line_1']) > 300)) {
            $invalidProperties[] = "invalid value for 'address_line_1', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['address_line_2']) && (mb_strlen($this->container['address_line_2']) > 300)) {
            $invalidProperties[] = "invalid value for 'address_line_2', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['address_line_3']) && (mb_strlen($this->container['address_line_3']) > 100)) {
            $invalidProperties[] = "invalid value for 'address_line_3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_4']) && (mb_strlen($this->container['admin_area_4']) > 100)) {
            $invalidProperties[] = "invalid value for 'admin_area_4', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_3']) && (mb_strlen($this->container['admin_area_3']) > 100)) {
            $invalidProperties[] = "invalid value for 'admin_area_3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_2']) && (mb_strlen($this->container['admin_area_2']) > 120)) {
            $invalidProperties[] = "invalid value for 'admin_area_2', the character length must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['admin_area_1']) && (mb_strlen($this->container['admin_area_1']) > 300)) {
            $invalidProperties[] = "invalid value for 'admin_area_1', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 60)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 2.";
        }

        if (!preg_match("/^([A-Z]{2}|C2)$/", $this->container['country_code'])) {
            $invalidProperties[] = "invalid value for 'country_code', must be conform to the pattern /^([A-Z]{2}|C2)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_line_1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param string|null $address_line_1 The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.
     *
     * @return self
     */
    public function setAddressLine1($address_line_1)
    {
        if (is_null($address_line_1)) {
            throw new \InvalidArgumentException('non-nullable address_line_1 cannot be null');
        }
        if ((mb_strlen($address_line_1) > 300)) {
            throw new \InvalidArgumentException('invalid length for $address_line_1 when calling AddressPortable., must be smaller than or equal to 300.');
        }

        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param string|null $address_line_2 The second line of the address. For example, suite or apartment number.
     *
     * @return self
     */
    public function setAddressLine2($address_line_2)
    {
        if (is_null($address_line_2)) {
            throw new \InvalidArgumentException('non-nullable address_line_2 cannot be null');
        }
        if ((mb_strlen($address_line_2) > 300)) {
            throw new \InvalidArgumentException('invalid length for $address_line_2 when calling AddressPortable., must be smaller than or equal to 300.');
        }

        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets address_line_3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line_3'];
    }

    /**
     * Sets address_line_3
     *
     * @param string|null $address_line_3 The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.
     *
     * @return self
     */
    public function setAddressLine3($address_line_3)
    {
        if (is_null($address_line_3)) {
            throw new \InvalidArgumentException('non-nullable address_line_3 cannot be null');
        }
        if ((mb_strlen($address_line_3) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address_line_3 when calling AddressPortable., must be smaller than or equal to 100.');
        }

        $this->container['address_line_3'] = $address_line_3;

        return $this;
    }

    /**
     * Gets admin_area_4
     *
     * @return string|null
     */
    public function getAdminArea4()
    {
        return $this->container['admin_area_4'];
    }

    /**
     * Sets admin_area_4
     *
     * @param string|null $admin_area_4 The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>
     *
     * @return self
     */
    public function setAdminArea4($admin_area_4)
    {
        if (is_null($admin_area_4)) {
            throw new \InvalidArgumentException('non-nullable admin_area_4 cannot be null');
        }
        if ((mb_strlen($admin_area_4) > 100)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_4 when calling AddressPortable., must be smaller than or equal to 100.');
        }

        $this->container['admin_area_4'] = $admin_area_4;

        return $this;
    }

    /**
     * Gets admin_area_3
     *
     * @return string|null
     */
    public function getAdminArea3()
    {
        return $this->container['admin_area_3'];
    }

    /**
     * Sets admin_area_3
     *
     * @param string|null $admin_area_3 A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>
     *
     * @return self
     */
    public function setAdminArea3($admin_area_3)
    {
        if (is_null($admin_area_3)) {
            throw new \InvalidArgumentException('non-nullable admin_area_3 cannot be null');
        }
        if ((mb_strlen($admin_area_3) > 100)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_3 when calling AddressPortable., must be smaller than or equal to 100.');
        }

        $this->container['admin_area_3'] = $admin_area_3;

        return $this;
    }

    /**
     * Gets admin_area_2
     *
     * @return string|null
     */
    public function getAdminArea2()
    {
        return $this->container['admin_area_2'];
    }

    /**
     * Sets admin_area_2
     *
     * @param string|null $admin_area_2 A city, town, or village. Smaller than `admin_area_level_1`.
     *
     * @return self
     */
    public function setAdminArea2($admin_area_2)
    {
        if (is_null($admin_area_2)) {
            throw new \InvalidArgumentException('non-nullable admin_area_2 cannot be null');
        }
        if ((mb_strlen($admin_area_2) > 120)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_2 when calling AddressPortable., must be smaller than or equal to 120.');
        }

        $this->container['admin_area_2'] = $admin_area_2;

        return $this;
    }

    /**
     * Gets admin_area_1
     *
     * @return string|null
     */
    public function getAdminArea1()
    {
        return $this->container['admin_area_1'];
    }

    /**
     * Sets admin_area_1
     *
     * @param string|null $admin_area_1 The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>
     *
     * @return self
     */
    public function setAdminArea1($admin_area_1)
    {
        if (is_null($admin_area_1)) {
            throw new \InvalidArgumentException('non-nullable admin_area_1 cannot be null');
        }
        if ((mb_strlen($admin_area_1) > 300)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_1 when calling AddressPortable., must be smaller than or equal to 300.');
        }

        $this->container['admin_area_1'] = $admin_area_1;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling AddressPortable., must be smaller than or equal to 60.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling AddressPortable., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling AddressPortable., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^([A-Z]{2}|C2)$/", $country_code))) {
            throw new \InvalidArgumentException("invalid value for \$country_code when calling AddressPortable., must conform to the pattern /^([A-Z]{2}|C2)$/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets address_details
     *
     * @return \OpenAPI\Client\Model\AddressDetails|null
     */
    public function getAddressDetails()
    {
        return $this->container['address_details'];
    }

    /**
     * Sets address_details
     *
     * @param \OpenAPI\Client\Model\AddressDetails|null $address_details address_details
     *
     * @return self
     */
    public function setAddressDetails($address_details)
    {
        if (is_null($address_details)) {
            throw new \InvalidArgumentException('non-nullable address_details cannot be null');
        }
        $this->container['address_details'] = $address_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


