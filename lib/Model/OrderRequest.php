<?php
/**
 * OrderRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderRequest Class Doc Comment
 *
 * @category Class
 * @description The order request details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'intent' => '\OpenAPI\Client\Model\CheckoutPaymentIntent',
        'payer' => '\OpenAPI\Client\Model\Payer',
        'purchase_units' => '\OpenAPI\Client\Model\PurchaseUnitRequest[]',
        'payment_source' => '\OpenAPI\Client\Model\PaymentSource',
        'application_context' => '\OpenAPI\Client\Model\OrderApplicationContext'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'intent' => null,
        'payer' => null,
        'purchase_units' => null,
        'payment_source' => null,
        'application_context' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'intent' => false,
		'payer' => false,
		'purchase_units' => false,
		'payment_source' => false,
		'application_context' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'intent' => 'intent',
        'payer' => 'payer',
        'purchase_units' => 'purchase_units',
        'payment_source' => 'payment_source',
        'application_context' => 'application_context'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'intent' => 'setIntent',
        'payer' => 'setPayer',
        'purchase_units' => 'setPurchaseUnits',
        'payment_source' => 'setPaymentSource',
        'application_context' => 'setApplicationContext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'intent' => 'getIntent',
        'payer' => 'getPayer',
        'purchase_units' => 'getPurchaseUnits',
        'payment_source' => 'getPaymentSource',
        'application_context' => 'getApplicationContext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('intent', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('purchase_units', $data ?? [], null);
        $this->setIfExists('payment_source', $data ?? [], null);
        $this->setIfExists('application_context', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['intent'] === null) {
            $invalidProperties[] = "'intent' can't be null";
        }
        if ($this->container['purchase_units'] === null) {
            $invalidProperties[] = "'purchase_units' can't be null";
        }
        if ((count($this->container['purchase_units']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_units', number of items must be less than or equal to 10.";
        }

        if ((count($this->container['purchase_units']) < 1)) {
            $invalidProperties[] = "invalid value for 'purchase_units', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets intent
     *
     * @return \OpenAPI\Client\Model\CheckoutPaymentIntent
     */
    public function getIntent()
    {
        return $this->container['intent'];
    }

    /**
     * Sets intent
     *
     * @param \OpenAPI\Client\Model\CheckoutPaymentIntent $intent intent
     *
     * @return self
     */
    public function setIntent($intent)
    {
        if (is_null($intent)) {
            throw new \InvalidArgumentException('non-nullable intent cannot be null');
        }
        $this->container['intent'] = $intent;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \OpenAPI\Client\Model\Payer|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \OpenAPI\Client\Model\Payer|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets purchase_units
     *
     * @return \OpenAPI\Client\Model\PurchaseUnitRequest[]
     */
    public function getPurchaseUnits()
    {
        return $this->container['purchase_units'];
    }

    /**
     * Sets purchase_units
     *
     * @param \OpenAPI\Client\Model\PurchaseUnitRequest[] $purchase_units An array of purchase units. Each purchase unit establishes a contract between a payer and the payee. Each purchase unit represents either a full or partial order that the payer intends to purchase from the payee.
     *
     * @return self
     */
    public function setPurchaseUnits($purchase_units)
    {
        if (is_null($purchase_units)) {
            throw new \InvalidArgumentException('non-nullable purchase_units cannot be null');
        }

        if ((count($purchase_units) > 10)) {
            throw new \InvalidArgumentException('invalid value for $purchase_units when calling OrderRequest., number of items must be less than or equal to 10.');
        }
        if ((count($purchase_units) < 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_units when calling OrderRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['purchase_units'] = $purchase_units;

        return $this;
    }

    /**
     * Gets payment_source
     *
     * @return \OpenAPI\Client\Model\PaymentSource|null
     */
    public function getPaymentSource()
    {
        return $this->container['payment_source'];
    }

    /**
     * Sets payment_source
     *
     * @param \OpenAPI\Client\Model\PaymentSource|null $payment_source payment_source
     *
     * @return self
     */
    public function setPaymentSource($payment_source)
    {
        if (is_null($payment_source)) {
            throw new \InvalidArgumentException('non-nullable payment_source cannot be null');
        }
        $this->container['payment_source'] = $payment_source;

        return $this;
    }

    /**
     * Gets application_context
     *
     * @return \OpenAPI\Client\Model\OrderApplicationContext|null
     */
    public function getApplicationContext()
    {
        return $this->container['application_context'];
    }

    /**
     * Sets application_context
     *
     * @param \OpenAPI\Client\Model\OrderApplicationContext|null $application_context application_context
     *
     * @return self
     */
    public function setApplicationContext($application_context)
    {
        if (is_null($application_context)) {
            throw new \InvalidArgumentException('non-nullable application_context cannot be null');
        }
        $this->container['application_context'] = $application_context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


