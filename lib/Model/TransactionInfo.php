<?php
/**
 * TransactionInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Transaction Search
 *
 * Use the Transaction Search API to get the history of transactions for a PayPal account. To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>. For more information about the API, see the <a href=\"/docs/transaction-search/\">Transaction Search API Integration Guide</a>.<blockquote><strong>Note:</strong> To use the API on behalf of third parties, you must be part of the PayPal partner network. Reach out to your partner manager for the next steps. To enroll in the partner program, see <a href=\"https://www.paypal.com/my/webapps/mpp/partner-program/global-programs\">Partner with PayPal</a>.</blockquote>
 *
 * The version of the OpenAPI document: 1.9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionInfo Class Doc Comment
 *
 * @category Class
 * @description The transaction information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paypal_account_id' => 'string',
        'transaction_id' => 'string',
        'paypal_reference_id' => 'string',
        'paypal_reference_id_type' => 'string',
        'transaction_event_code' => 'string',
        'transaction_initiation_date' => 'string',
        'transaction_updated_date' => 'string',
        'transaction_amount' => '\OpenAPI\Client\Model\Money',
        'fee_amount' => '\OpenAPI\Client\Model\Money',
        'discount_amount' => '\OpenAPI\Client\Model\Money',
        'insurance_amount' => '\OpenAPI\Client\Model\Money',
        'sales_tax_amount' => '\OpenAPI\Client\Model\Money',
        'shipping_amount' => '\OpenAPI\Client\Model\Money',
        'shipping_discount_amount' => '\OpenAPI\Client\Model\Money',
        'shipping_tax_amount' => '\OpenAPI\Client\Model\Money',
        'other_amount' => '\OpenAPI\Client\Model\Money',
        'tip_amount' => '\OpenAPI\Client\Model\Money',
        'transaction_status' => 'string',
        'transaction_subject' => 'string',
        'transaction_note' => 'string',
        'payment_tracking_id' => 'string',
        'bank_reference_id' => 'string',
        'ending_balance' => '\OpenAPI\Client\Model\Money',
        'available_balance' => '\OpenAPI\Client\Model\Money',
        'invoice_id' => 'string',
        'custom_field' => 'string',
        'protection_eligibility' => 'string',
        'credit_term' => 'string',
        'credit_transactional_fee' => '\OpenAPI\Client\Model\Money',
        'credit_promotional_fee' => '\OpenAPI\Client\Model\Money',
        'annual_percentage_rate' => 'string',
        'payment_method_type' => 'string',
        'instrument_type' => 'string',
        'instrument_sub_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paypal_account_id' => null,
        'transaction_id' => null,
        'paypal_reference_id' => null,
        'paypal_reference_id_type' => null,
        'transaction_event_code' => null,
        'transaction_initiation_date' => 'ppaas_date_time_v3',
        'transaction_updated_date' => 'ppaas_date_time_v3',
        'transaction_amount' => null,
        'fee_amount' => null,
        'discount_amount' => null,
        'insurance_amount' => null,
        'sales_tax_amount' => null,
        'shipping_amount' => null,
        'shipping_discount_amount' => null,
        'shipping_tax_amount' => null,
        'other_amount' => null,
        'tip_amount' => null,
        'transaction_status' => null,
        'transaction_subject' => null,
        'transaction_note' => null,
        'payment_tracking_id' => null,
        'bank_reference_id' => null,
        'ending_balance' => null,
        'available_balance' => null,
        'invoice_id' => null,
        'custom_field' => null,
        'protection_eligibility' => null,
        'credit_term' => null,
        'credit_transactional_fee' => null,
        'credit_promotional_fee' => null,
        'annual_percentage_rate' => 'ppaas_common_percentage_v2',
        'payment_method_type' => null,
        'instrument_type' => null,
        'instrument_sub_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'paypal_account_id' => false,
		'transaction_id' => false,
		'paypal_reference_id' => false,
		'paypal_reference_id_type' => false,
		'transaction_event_code' => false,
		'transaction_initiation_date' => false,
		'transaction_updated_date' => false,
		'transaction_amount' => false,
		'fee_amount' => false,
		'discount_amount' => false,
		'insurance_amount' => false,
		'sales_tax_amount' => false,
		'shipping_amount' => false,
		'shipping_discount_amount' => false,
		'shipping_tax_amount' => false,
		'other_amount' => false,
		'tip_amount' => false,
		'transaction_status' => false,
		'transaction_subject' => false,
		'transaction_note' => false,
		'payment_tracking_id' => false,
		'bank_reference_id' => false,
		'ending_balance' => false,
		'available_balance' => false,
		'invoice_id' => false,
		'custom_field' => false,
		'protection_eligibility' => false,
		'credit_term' => false,
		'credit_transactional_fee' => false,
		'credit_promotional_fee' => false,
		'annual_percentage_rate' => false,
		'payment_method_type' => false,
		'instrument_type' => false,
		'instrument_sub_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paypal_account_id' => 'paypal_account_id',
        'transaction_id' => 'transaction_id',
        'paypal_reference_id' => 'paypal_reference_id',
        'paypal_reference_id_type' => 'paypal_reference_id_type',
        'transaction_event_code' => 'transaction_event_code',
        'transaction_initiation_date' => 'transaction_initiation_date',
        'transaction_updated_date' => 'transaction_updated_date',
        'transaction_amount' => 'transaction_amount',
        'fee_amount' => 'fee_amount',
        'discount_amount' => 'discount_amount',
        'insurance_amount' => 'insurance_amount',
        'sales_tax_amount' => 'sales_tax_amount',
        'shipping_amount' => 'shipping_amount',
        'shipping_discount_amount' => 'shipping_discount_amount',
        'shipping_tax_amount' => 'shipping_tax_amount',
        'other_amount' => 'other_amount',
        'tip_amount' => 'tip_amount',
        'transaction_status' => 'transaction_status',
        'transaction_subject' => 'transaction_subject',
        'transaction_note' => 'transaction_note',
        'payment_tracking_id' => 'payment_tracking_id',
        'bank_reference_id' => 'bank_reference_id',
        'ending_balance' => 'ending_balance',
        'available_balance' => 'available_balance',
        'invoice_id' => 'invoice_id',
        'custom_field' => 'custom_field',
        'protection_eligibility' => 'protection_eligibility',
        'credit_term' => 'credit_term',
        'credit_transactional_fee' => 'credit_transactional_fee',
        'credit_promotional_fee' => 'credit_promotional_fee',
        'annual_percentage_rate' => 'annual_percentage_rate',
        'payment_method_type' => 'payment_method_type',
        'instrument_type' => 'instrument_type',
        'instrument_sub_type' => 'instrument_sub_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paypal_account_id' => 'setPaypalAccountId',
        'transaction_id' => 'setTransactionId',
        'paypal_reference_id' => 'setPaypalReferenceId',
        'paypal_reference_id_type' => 'setPaypalReferenceIdType',
        'transaction_event_code' => 'setTransactionEventCode',
        'transaction_initiation_date' => 'setTransactionInitiationDate',
        'transaction_updated_date' => 'setTransactionUpdatedDate',
        'transaction_amount' => 'setTransactionAmount',
        'fee_amount' => 'setFeeAmount',
        'discount_amount' => 'setDiscountAmount',
        'insurance_amount' => 'setInsuranceAmount',
        'sales_tax_amount' => 'setSalesTaxAmount',
        'shipping_amount' => 'setShippingAmount',
        'shipping_discount_amount' => 'setShippingDiscountAmount',
        'shipping_tax_amount' => 'setShippingTaxAmount',
        'other_amount' => 'setOtherAmount',
        'tip_amount' => 'setTipAmount',
        'transaction_status' => 'setTransactionStatus',
        'transaction_subject' => 'setTransactionSubject',
        'transaction_note' => 'setTransactionNote',
        'payment_tracking_id' => 'setPaymentTrackingId',
        'bank_reference_id' => 'setBankReferenceId',
        'ending_balance' => 'setEndingBalance',
        'available_balance' => 'setAvailableBalance',
        'invoice_id' => 'setInvoiceId',
        'custom_field' => 'setCustomField',
        'protection_eligibility' => 'setProtectionEligibility',
        'credit_term' => 'setCreditTerm',
        'credit_transactional_fee' => 'setCreditTransactionalFee',
        'credit_promotional_fee' => 'setCreditPromotionalFee',
        'annual_percentage_rate' => 'setAnnualPercentageRate',
        'payment_method_type' => 'setPaymentMethodType',
        'instrument_type' => 'setInstrumentType',
        'instrument_sub_type' => 'setInstrumentSubType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paypal_account_id' => 'getPaypalAccountId',
        'transaction_id' => 'getTransactionId',
        'paypal_reference_id' => 'getPaypalReferenceId',
        'paypal_reference_id_type' => 'getPaypalReferenceIdType',
        'transaction_event_code' => 'getTransactionEventCode',
        'transaction_initiation_date' => 'getTransactionInitiationDate',
        'transaction_updated_date' => 'getTransactionUpdatedDate',
        'transaction_amount' => 'getTransactionAmount',
        'fee_amount' => 'getFeeAmount',
        'discount_amount' => 'getDiscountAmount',
        'insurance_amount' => 'getInsuranceAmount',
        'sales_tax_amount' => 'getSalesTaxAmount',
        'shipping_amount' => 'getShippingAmount',
        'shipping_discount_amount' => 'getShippingDiscountAmount',
        'shipping_tax_amount' => 'getShippingTaxAmount',
        'other_amount' => 'getOtherAmount',
        'tip_amount' => 'getTipAmount',
        'transaction_status' => 'getTransactionStatus',
        'transaction_subject' => 'getTransactionSubject',
        'transaction_note' => 'getTransactionNote',
        'payment_tracking_id' => 'getPaymentTrackingId',
        'bank_reference_id' => 'getBankReferenceId',
        'ending_balance' => 'getEndingBalance',
        'available_balance' => 'getAvailableBalance',
        'invoice_id' => 'getInvoiceId',
        'custom_field' => 'getCustomField',
        'protection_eligibility' => 'getProtectionEligibility',
        'credit_term' => 'getCreditTerm',
        'credit_transactional_fee' => 'getCreditTransactionalFee',
        'credit_promotional_fee' => 'getCreditPromotionalFee',
        'annual_percentage_rate' => 'getAnnualPercentageRate',
        'payment_method_type' => 'getPaymentMethodType',
        'instrument_type' => 'getInstrumentType',
        'instrument_sub_type' => 'getInstrumentSubType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYPAL_REFERENCE_ID_TYPE_ODR = 'ODR';
    public const PAYPAL_REFERENCE_ID_TYPE_TXN = 'TXN';
    public const PAYPAL_REFERENCE_ID_TYPE_SUB = 'SUB';
    public const PAYPAL_REFERENCE_ID_TYPE_PAP = 'PAP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaypalReferenceIdTypeAllowableValues()
    {
        return [
            self::PAYPAL_REFERENCE_ID_TYPE_ODR,
            self::PAYPAL_REFERENCE_ID_TYPE_TXN,
            self::PAYPAL_REFERENCE_ID_TYPE_SUB,
            self::PAYPAL_REFERENCE_ID_TYPE_PAP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('paypal_account_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('paypal_reference_id', $data ?? [], null);
        $this->setIfExists('paypal_reference_id_type', $data ?? [], null);
        $this->setIfExists('transaction_event_code', $data ?? [], null);
        $this->setIfExists('transaction_initiation_date', $data ?? [], null);
        $this->setIfExists('transaction_updated_date', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('fee_amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('insurance_amount', $data ?? [], null);
        $this->setIfExists('sales_tax_amount', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('shipping_discount_amount', $data ?? [], null);
        $this->setIfExists('shipping_tax_amount', $data ?? [], null);
        $this->setIfExists('other_amount', $data ?? [], null);
        $this->setIfExists('tip_amount', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('transaction_subject', $data ?? [], null);
        $this->setIfExists('transaction_note', $data ?? [], null);
        $this->setIfExists('payment_tracking_id', $data ?? [], null);
        $this->setIfExists('bank_reference_id', $data ?? [], null);
        $this->setIfExists('ending_balance', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('custom_field', $data ?? [], null);
        $this->setIfExists('protection_eligibility', $data ?? [], null);
        $this->setIfExists('credit_term', $data ?? [], null);
        $this->setIfExists('credit_transactional_fee', $data ?? [], null);
        $this->setIfExists('credit_promotional_fee', $data ?? [], null);
        $this->setIfExists('annual_percentage_rate', $data ?? [], null);
        $this->setIfExists('payment_method_type', $data ?? [], null);
        $this->setIfExists('instrument_type', $data ?? [], null);
        $this->setIfExists('instrument_sub_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['paypal_account_id']) && (mb_strlen($this->container['paypal_account_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'paypal_account_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['paypal_account_id']) && (mb_strlen($this->container['paypal_account_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'paypal_account_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['paypal_account_id']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['paypal_account_id'])) {
            $invalidProperties[] = "invalid value for 'paypal_account_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['transaction_id']) && (mb_strlen($this->container['transaction_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['transaction_id']) && (mb_strlen($this->container['transaction_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_id']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['transaction_id'])) {
            $invalidProperties[] = "invalid value for 'transaction_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['paypal_reference_id']) && (mb_strlen($this->container['paypal_reference_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['paypal_reference_id']) && (mb_strlen($this->container['paypal_reference_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['paypal_reference_id']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['paypal_reference_id'])) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        $allowedValues = $this->getPaypalReferenceIdTypeAllowableValues();
        if (!is_null($this->container['paypal_reference_id_type']) && !in_array($this->container['paypal_reference_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paypal_reference_id_type', must be one of '%s'",
                $this->container['paypal_reference_id_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['paypal_reference_id_type']) && (mb_strlen($this->container['paypal_reference_id_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['paypal_reference_id_type']) && (mb_strlen($this->container['paypal_reference_id_type']) < 3)) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id_type', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['paypal_reference_id_type']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['paypal_reference_id_type'])) {
            $invalidProperties[] = "invalid value for 'paypal_reference_id_type', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['transaction_event_code']) && (mb_strlen($this->container['transaction_event_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_event_code', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['transaction_event_code']) && (mb_strlen($this->container['transaction_event_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_event_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_event_code']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['transaction_event_code'])) {
            $invalidProperties[] = "invalid value for 'transaction_event_code', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['transaction_initiation_date']) && (mb_strlen($this->container['transaction_initiation_date']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_initiation_date', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['transaction_initiation_date']) && (mb_strlen($this->container['transaction_initiation_date']) < 20)) {
            $invalidProperties[] = "invalid value for 'transaction_initiation_date', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['transaction_initiation_date']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $this->container['transaction_initiation_date'])) {
            $invalidProperties[] = "invalid value for 'transaction_initiation_date', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.";
        }

        if (!is_null($this->container['transaction_updated_date']) && (mb_strlen($this->container['transaction_updated_date']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_updated_date', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['transaction_updated_date']) && (mb_strlen($this->container['transaction_updated_date']) < 20)) {
            $invalidProperties[] = "invalid value for 'transaction_updated_date', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['transaction_updated_date']) && !preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $this->container['transaction_updated_date'])) {
            $invalidProperties[] = "invalid value for 'transaction_updated_date', must be conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.";
        }

        if (!is_null($this->container['transaction_status']) && (mb_strlen($this->container['transaction_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'transaction_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transaction_status']) && (mb_strlen($this->container['transaction_status']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_status', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_status']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['transaction_status'])) {
            $invalidProperties[] = "invalid value for 'transaction_status', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['transaction_subject']) && (mb_strlen($this->container['transaction_subject']) > 256)) {
            $invalidProperties[] = "invalid value for 'transaction_subject', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['transaction_subject']) && (mb_strlen($this->container['transaction_subject']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_subject', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_subject']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['transaction_subject'])) {
            $invalidProperties[] = "invalid value for 'transaction_subject', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['transaction_note']) && (mb_strlen($this->container['transaction_note']) > 4000)) {
            $invalidProperties[] = "invalid value for 'transaction_note', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['transaction_note']) && (mb_strlen($this->container['transaction_note']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_note', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_note']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['transaction_note'])) {
            $invalidProperties[] = "invalid value for 'transaction_note', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['payment_tracking_id']) && (mb_strlen($this->container['payment_tracking_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'payment_tracking_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['payment_tracking_id']) && (mb_strlen($this->container['payment_tracking_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_tracking_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_tracking_id']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['payment_tracking_id'])) {
            $invalidProperties[] = "invalid value for 'payment_tracking_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['bank_reference_id']) && (mb_strlen($this->container['bank_reference_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'bank_reference_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['bank_reference_id']) && (mb_strlen($this->container['bank_reference_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'bank_reference_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bank_reference_id']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['bank_reference_id'])) {
            $invalidProperties[] = "invalid value for 'bank_reference_id', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['invoice_id']) && (mb_strlen($this->container['invoice_id']) > 127)) {
            $invalidProperties[] = "invalid value for 'invoice_id', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['invoice_id']) && (mb_strlen($this->container['invoice_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['invoice_id']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['invoice_id'])) {
            $invalidProperties[] = "invalid value for 'invoice_id', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['custom_field']) && (mb_strlen($this->container['custom_field']) > 127)) {
            $invalidProperties[] = "invalid value for 'custom_field', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['custom_field']) && (mb_strlen($this->container['custom_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'custom_field', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['custom_field']) && !preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $this->container['custom_field'])) {
            $invalidProperties[] = "invalid value for 'custom_field', must be conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.";
        }

        if (!is_null($this->container['protection_eligibility']) && (mb_strlen($this->container['protection_eligibility']) > 2)) {
            $invalidProperties[] = "invalid value for 'protection_eligibility', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['protection_eligibility']) && (mb_strlen($this->container['protection_eligibility']) < 1)) {
            $invalidProperties[] = "invalid value for 'protection_eligibility', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['protection_eligibility']) && !preg_match("/^[a-zA-Z0-9]*$/", $this->container['protection_eligibility'])) {
            $invalidProperties[] = "invalid value for 'protection_eligibility', must be conform to the pattern /^[a-zA-Z0-9]*$/.";
        }

        if (!is_null($this->container['credit_term']) && (mb_strlen($this->container['credit_term']) > 25)) {
            $invalidProperties[] = "invalid value for 'credit_term', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['credit_term']) && (mb_strlen($this->container['credit_term']) < 1)) {
            $invalidProperties[] = "invalid value for 'credit_term', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['credit_term']) && !preg_match("/^[a-zA-Z0-9.]*$/", $this->container['credit_term'])) {
            $invalidProperties[] = "invalid value for 'credit_term', must be conform to the pattern /^[a-zA-Z0-9.]*$/.";
        }

        if (!is_null($this->container['annual_percentage_rate']) && !preg_match("/^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/", $this->container['annual_percentage_rate'])) {
            $invalidProperties[] = "invalid value for 'annual_percentage_rate', must be conform to the pattern /^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/.";
        }

        if (!is_null($this->container['payment_method_type']) && (mb_strlen($this->container['payment_method_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'payment_method_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['payment_method_type']) && (mb_strlen($this->container['payment_method_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_method_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_method_type']) && !preg_match("/^[a-zA-Z0-9-]*$/", $this->container['payment_method_type'])) {
            $invalidProperties[] = "invalid value for 'payment_method_type', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if (!is_null($this->container['instrument_type']) && (mb_strlen($this->container['instrument_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'instrument_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['instrument_type']) && (mb_strlen($this->container['instrument_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'instrument_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['instrument_sub_type']) && (mb_strlen($this->container['instrument_sub_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'instrument_sub_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['instrument_sub_type']) && (mb_strlen($this->container['instrument_sub_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'instrument_sub_type', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paypal_account_id
     *
     * @return string|null
     */
    public function getPaypalAccountId()
    {
        return $this->container['paypal_account_id'];
    }

    /**
     * Sets paypal_account_id
     *
     * @param string|null $paypal_account_id The ID of the PayPal account of the counterparty.
     *
     * @return self
     */
    public function setPaypalAccountId($paypal_account_id)
    {
        if (is_null($paypal_account_id)) {
            throw new \InvalidArgumentException('non-nullable paypal_account_id cannot be null');
        }
        if ((mb_strlen($paypal_account_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $paypal_account_id when calling TransactionInfo., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($paypal_account_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $paypal_account_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $paypal_account_id))) {
            throw new \InvalidArgumentException("invalid value for \$paypal_account_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['paypal_account_id'] = $paypal_account_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id The PayPal-generated transaction ID.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        if ((mb_strlen($transaction_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling TransactionInfo., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($transaction_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $transaction_id))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets paypal_reference_id
     *
     * @return string|null
     */
    public function getPaypalReferenceId()
    {
        return $this->container['paypal_reference_id'];
    }

    /**
     * Sets paypal_reference_id
     *
     * @param string|null $paypal_reference_id The PayPal-generated base ID. PayPal exclusive. Cannot be altered. Defined as a related, pre-existing transaction or event.
     *
     * @return self
     */
    public function setPaypalReferenceId($paypal_reference_id)
    {
        if (is_null($paypal_reference_id)) {
            throw new \InvalidArgumentException('non-nullable paypal_reference_id cannot be null');
        }
        if ((mb_strlen($paypal_reference_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $paypal_reference_id when calling TransactionInfo., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($paypal_reference_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $paypal_reference_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $paypal_reference_id))) {
            throw new \InvalidArgumentException("invalid value for \$paypal_reference_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['paypal_reference_id'] = $paypal_reference_id;

        return $this;
    }

    /**
     * Gets paypal_reference_id_type
     *
     * @return string|null
     */
    public function getPaypalReferenceIdType()
    {
        return $this->container['paypal_reference_id_type'];
    }

    /**
     * Sets paypal_reference_id_type
     *
     * @param string|null $paypal_reference_id_type The PayPal reference ID type.
     *
     * @return self
     */
    public function setPaypalReferenceIdType($paypal_reference_id_type)
    {
        if (is_null($paypal_reference_id_type)) {
            throw new \InvalidArgumentException('non-nullable paypal_reference_id_type cannot be null');
        }
        $allowedValues = $this->getPaypalReferenceIdTypeAllowableValues();
        if (!in_array($paypal_reference_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paypal_reference_id_type', must be one of '%s'",
                    $paypal_reference_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($paypal_reference_id_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $paypal_reference_id_type when calling TransactionInfo., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($paypal_reference_id_type) < 3)) {
            throw new \InvalidArgumentException('invalid length for $paypal_reference_id_type when calling TransactionInfo., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $paypal_reference_id_type))) {
            throw new \InvalidArgumentException("invalid value for \$paypal_reference_id_type when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['paypal_reference_id_type'] = $paypal_reference_id_type;

        return $this;
    }

    /**
     * Gets transaction_event_code
     *
     * @return string|null
     */
    public function getTransactionEventCode()
    {
        return $this->container['transaction_event_code'];
    }

    /**
     * Sets transaction_event_code
     *
     * @param string|null $transaction_event_code A five-digit transaction event code that classifies the transaction type based on money movement and debit or credit. For example, <code>T0001</code>. See [Transaction event codes](/docs/integration/direct/transaction-search/transaction-event-codes/).
     *
     * @return self
     */
    public function setTransactionEventCode($transaction_event_code)
    {
        if (is_null($transaction_event_code)) {
            throw new \InvalidArgumentException('non-nullable transaction_event_code cannot be null');
        }
        if ((mb_strlen($transaction_event_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_event_code when calling TransactionInfo., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($transaction_event_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_event_code when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $transaction_event_code))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_event_code when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['transaction_event_code'] = $transaction_event_code;

        return $this;
    }

    /**
     * Gets transaction_initiation_date
     *
     * @return string|null
     */
    public function getTransactionInitiationDate()
    {
        return $this->container['transaction_initiation_date'];
    }

    /**
     * Sets transaction_initiation_date
     *
     * @param string|null $transaction_initiation_date The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
     *
     * @return self
     */
    public function setTransactionInitiationDate($transaction_initiation_date)
    {
        if (is_null($transaction_initiation_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_initiation_date cannot be null');
        }
        if ((mb_strlen($transaction_initiation_date) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_initiation_date when calling TransactionInfo., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($transaction_initiation_date) < 20)) {
            throw new \InvalidArgumentException('invalid length for $transaction_initiation_date when calling TransactionInfo., must be bigger than or equal to 20.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $transaction_initiation_date))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_initiation_date when calling TransactionInfo., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.");
        }

        $this->container['transaction_initiation_date'] = $transaction_initiation_date;

        return $this;
    }

    /**
     * Gets transaction_updated_date
     *
     * @return string|null
     */
    public function getTransactionUpdatedDate()
    {
        return $this->container['transaction_updated_date'];
    }

    /**
     * Sets transaction_updated_date
     *
     * @param string|null $transaction_updated_date The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
     *
     * @return self
     */
    public function setTransactionUpdatedDate($transaction_updated_date)
    {
        if (is_null($transaction_updated_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_updated_date cannot be null');
        }
        if ((mb_strlen($transaction_updated_date) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_updated_date when calling TransactionInfo., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($transaction_updated_date) < 20)) {
            throw new \InvalidArgumentException('invalid length for $transaction_updated_date when calling TransactionInfo., must be bigger than or equal to 20.');
        }
        if ((!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/", $transaction_updated_date))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_updated_date when calling TransactionInfo., must conform to the pattern /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$/.");
        }

        $this->container['transaction_updated_date'] = $transaction_updated_date;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $transaction_amount transaction_amount
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $fee_amount fee_amount
     *
     * @return self
     */
    public function setFeeAmount($fee_amount)
    {
        if (is_null($fee_amount)) {
            throw new \InvalidArgumentException('non-nullable fee_amount cannot be null');
        }
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets insurance_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getInsuranceAmount()
    {
        return $this->container['insurance_amount'];
    }

    /**
     * Sets insurance_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $insurance_amount insurance_amount
     *
     * @return self
     */
    public function setInsuranceAmount($insurance_amount)
    {
        if (is_null($insurance_amount)) {
            throw new \InvalidArgumentException('non-nullable insurance_amount cannot be null');
        }
        $this->container['insurance_amount'] = $insurance_amount;

        return $this;
    }

    /**
     * Gets sales_tax_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getSalesTaxAmount()
    {
        return $this->container['sales_tax_amount'];
    }

    /**
     * Sets sales_tax_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $sales_tax_amount sales_tax_amount
     *
     * @return self
     */
    public function setSalesTaxAmount($sales_tax_amount)
    {
        if (is_null($sales_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable sales_tax_amount cannot be null');
        }
        $this->container['sales_tax_amount'] = $sales_tax_amount;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $shipping_amount shipping_amount
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets shipping_discount_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getShippingDiscountAmount()
    {
        return $this->container['shipping_discount_amount'];
    }

    /**
     * Sets shipping_discount_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $shipping_discount_amount shipping_discount_amount
     *
     * @return self
     */
    public function setShippingDiscountAmount($shipping_discount_amount)
    {
        if (is_null($shipping_discount_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_discount_amount cannot be null');
        }
        $this->container['shipping_discount_amount'] = $shipping_discount_amount;

        return $this;
    }

    /**
     * Gets shipping_tax_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shipping_tax_amount'];
    }

    /**
     * Sets shipping_tax_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $shipping_tax_amount shipping_tax_amount
     *
     * @return self
     */
    public function setShippingTaxAmount($shipping_tax_amount)
    {
        if (is_null($shipping_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_tax_amount cannot be null');
        }
        $this->container['shipping_tax_amount'] = $shipping_tax_amount;

        return $this;
    }

    /**
     * Gets other_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getOtherAmount()
    {
        return $this->container['other_amount'];
    }

    /**
     * Sets other_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $other_amount other_amount
     *
     * @return self
     */
    public function setOtherAmount($other_amount)
    {
        if (is_null($other_amount)) {
            throw new \InvalidArgumentException('non-nullable other_amount cannot be null');
        }
        $this->container['other_amount'] = $other_amount;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $tip_amount tip_amount
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        if (is_null($tip_amount)) {
            throw new \InvalidArgumentException('non-nullable tip_amount cannot be null');
        }
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string|null
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string|null $transaction_status A code that indicates the transaction status. Value is:<table><thead><tr><th>Status&nbsp;code</th><th>Description</th></tr></thead><tbody><tr><td><code>D</code></td><td>PayPal or merchant rules denied the transaction.</td></tr><tr><td><code>P</code></td><td>The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to <code>S</code>.</td></tr><tr><td><code>S</code></td><td>The transaction successfully completed without a denial and after any pending statuses.</td></tr><tr><td><code>V</code></td><td>A successful transaction was fully reversed and funds were refunded to the original sender.</td></tr></tbody></table>
     *
     * @return self
     */
    public function setTransactionStatus($transaction_status)
    {
        if (is_null($transaction_status)) {
            throw new \InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        if ((mb_strlen($transaction_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_status when calling TransactionInfo., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($transaction_status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_status when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $transaction_status))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_status when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_subject
     *
     * @return string|null
     */
    public function getTransactionSubject()
    {
        return $this->container['transaction_subject'];
    }

    /**
     * Sets transaction_subject
     *
     * @param string|null $transaction_subject The subject of payment. The payer passes this value to the payee. The payer controls this data through the interface through which he or she sends the data.
     *
     * @return self
     */
    public function setTransactionSubject($transaction_subject)
    {
        if (is_null($transaction_subject)) {
            throw new \InvalidArgumentException('non-nullable transaction_subject cannot be null');
        }
        if ((mb_strlen($transaction_subject) > 256)) {
            throw new \InvalidArgumentException('invalid length for $transaction_subject when calling TransactionInfo., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($transaction_subject) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_subject when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $transaction_subject))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_subject when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['transaction_subject'] = $transaction_subject;

        return $this;
    }

    /**
     * Gets transaction_note
     *
     * @return string|null
     */
    public function getTransactionNote()
    {
        return $this->container['transaction_note'];
    }

    /**
     * Sets transaction_note
     *
     * @param string|null $transaction_note A special note that the payer passes to the payee. Might contain special customer requests, such as shipping instructions.
     *
     * @return self
     */
    public function setTransactionNote($transaction_note)
    {
        if (is_null($transaction_note)) {
            throw new \InvalidArgumentException('non-nullable transaction_note cannot be null');
        }
        if ((mb_strlen($transaction_note) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $transaction_note when calling TransactionInfo., must be smaller than or equal to 4000.');
        }
        if ((mb_strlen($transaction_note) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_note when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $transaction_note))) {
            throw new \InvalidArgumentException("invalid value for \$transaction_note when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['transaction_note'] = $transaction_note;

        return $this;
    }

    /**
     * Gets payment_tracking_id
     *
     * @return string|null
     */
    public function getPaymentTrackingId()
    {
        return $this->container['payment_tracking_id'];
    }

    /**
     * Sets payment_tracking_id
     *
     * @param string|null $payment_tracking_id The payment tracking ID, which is a unique ID that partners specify to either get information about a payment or request a refund.
     *
     * @return self
     */
    public function setPaymentTrackingId($payment_tracking_id)
    {
        if (is_null($payment_tracking_id)) {
            throw new \InvalidArgumentException('non-nullable payment_tracking_id cannot be null');
        }
        if ((mb_strlen($payment_tracking_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $payment_tracking_id when calling TransactionInfo., must be smaller than or equal to 127.');
        }
        if ((mb_strlen($payment_tracking_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_tracking_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $payment_tracking_id))) {
            throw new \InvalidArgumentException("invalid value for \$payment_tracking_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['payment_tracking_id'] = $payment_tracking_id;

        return $this;
    }

    /**
     * Gets bank_reference_id
     *
     * @return string|null
     */
    public function getBankReferenceId()
    {
        return $this->container['bank_reference_id'];
    }

    /**
     * Sets bank_reference_id
     *
     * @param string|null $bank_reference_id The bank reference ID. The bank provides this value for an ACH transaction.
     *
     * @return self
     */
    public function setBankReferenceId($bank_reference_id)
    {
        if (is_null($bank_reference_id)) {
            throw new \InvalidArgumentException('non-nullable bank_reference_id cannot be null');
        }
        if ((mb_strlen($bank_reference_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $bank_reference_id when calling TransactionInfo., must be smaller than or equal to 127.');
        }
        if ((mb_strlen($bank_reference_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bank_reference_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $bank_reference_id))) {
            throw new \InvalidArgumentException("invalid value for \$bank_reference_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['bank_reference_id'] = $bank_reference_id;

        return $this;
    }

    /**
     * Gets ending_balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getEndingBalance()
    {
        return $this->container['ending_balance'];
    }

    /**
     * Sets ending_balance
     *
     * @param \OpenAPI\Client\Model\Money|null $ending_balance ending_balance
     *
     * @return self
     */
    public function setEndingBalance($ending_balance)
    {
        if (is_null($ending_balance)) {
            throw new \InvalidArgumentException('non-nullable ending_balance cannot be null');
        }
        $this->container['ending_balance'] = $ending_balance;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param \OpenAPI\Client\Model\Money|null $available_balance available_balance
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id The invoice ID that is sent by the merchant with the transaction.<blockquote><strong>Note:</strong> If an invoice ID was sent with the capture request, the value is reported. Otherwise, the invoice ID of the authorizing transaction is reported.</blockquote>
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        if ((mb_strlen($invoice_id) > 127)) {
            throw new \InvalidArgumentException('invalid length for $invoice_id when calling TransactionInfo., must be smaller than or equal to 127.');
        }
        if ((mb_strlen($invoice_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_id when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $invoice_id))) {
            throw new \InvalidArgumentException("invalid value for \$invoice_id when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets custom_field
     *
     * @return string|null
     */
    public function getCustomField()
    {
        return $this->container['custom_field'];
    }

    /**
     * Sets custom_field
     *
     * @param string|null $custom_field The merchant-provided custom text.<blockquote><strong>Note:</strong> Usually, this field includes the unique ID for payments made with MassPay type transaction.</blockquote>
     *
     * @return self
     */
    public function setCustomField($custom_field)
    {
        if (is_null($custom_field)) {
            throw new \InvalidArgumentException('non-nullable custom_field cannot be null');
        }
        if ((mb_strlen($custom_field) > 127)) {
            throw new \InvalidArgumentException('invalid length for $custom_field when calling TransactionInfo., must be smaller than or equal to 127.');
        }
        if ((mb_strlen($custom_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $custom_field when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_'\\-., \":;\\!?]*$/", $custom_field))) {
            throw new \InvalidArgumentException("invalid value for \$custom_field when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9_'\\-., \":;\\!?]*$/.");
        }

        $this->container['custom_field'] = $custom_field;

        return $this;
    }

    /**
     * Gets protection_eligibility
     *
     * @return string|null
     */
    public function getProtectionEligibility()
    {
        return $this->container['protection_eligibility'];
    }

    /**
     * Sets protection_eligibility
     *
     * @param string|null $protection_eligibility Indicates whether the transaction is eligible for protection. Value is:<ul><li><code>01</code>. Eligible.</li><li><code>02</code>. Not eligible</li><li><code>03</code>. Partially eligible.</li></ul>
     *
     * @return self
     */
    public function setProtectionEligibility($protection_eligibility)
    {
        if (is_null($protection_eligibility)) {
            throw new \InvalidArgumentException('non-nullable protection_eligibility cannot be null');
        }
        if ((mb_strlen($protection_eligibility) > 2)) {
            throw new \InvalidArgumentException('invalid length for $protection_eligibility when calling TransactionInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($protection_eligibility) < 1)) {
            throw new \InvalidArgumentException('invalid length for $protection_eligibility when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9]*$/", $protection_eligibility))) {
            throw new \InvalidArgumentException("invalid value for \$protection_eligibility when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9]*$/.");
        }

        $this->container['protection_eligibility'] = $protection_eligibility;

        return $this;
    }

    /**
     * Gets credit_term
     *
     * @return string|null
     */
    public function getCreditTerm()
    {
        return $this->container['credit_term'];
    }

    /**
     * Sets credit_term
     *
     * @param string|null $credit_term The credit term. The time span covered by the installment payments as expressed in the term length plus the length time unit code.
     *
     * @return self
     */
    public function setCreditTerm($credit_term)
    {
        if (is_null($credit_term)) {
            throw new \InvalidArgumentException('non-nullable credit_term cannot be null');
        }
        if ((mb_strlen($credit_term) > 25)) {
            throw new \InvalidArgumentException('invalid length for $credit_term when calling TransactionInfo., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($credit_term) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credit_term when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9.]*$/", $credit_term))) {
            throw new \InvalidArgumentException("invalid value for \$credit_term when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9.]*$/.");
        }

        $this->container['credit_term'] = $credit_term;

        return $this;
    }

    /**
     * Gets credit_transactional_fee
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getCreditTransactionalFee()
    {
        return $this->container['credit_transactional_fee'];
    }

    /**
     * Sets credit_transactional_fee
     *
     * @param \OpenAPI\Client\Model\Money|null $credit_transactional_fee credit_transactional_fee
     *
     * @return self
     */
    public function setCreditTransactionalFee($credit_transactional_fee)
    {
        if (is_null($credit_transactional_fee)) {
            throw new \InvalidArgumentException('non-nullable credit_transactional_fee cannot be null');
        }
        $this->container['credit_transactional_fee'] = $credit_transactional_fee;

        return $this;
    }

    /**
     * Gets credit_promotional_fee
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getCreditPromotionalFee()
    {
        return $this->container['credit_promotional_fee'];
    }

    /**
     * Sets credit_promotional_fee
     *
     * @param \OpenAPI\Client\Model\Money|null $credit_promotional_fee credit_promotional_fee
     *
     * @return self
     */
    public function setCreditPromotionalFee($credit_promotional_fee)
    {
        if (is_null($credit_promotional_fee)) {
            throw new \InvalidArgumentException('non-nullable credit_promotional_fee cannot be null');
        }
        $this->container['credit_promotional_fee'] = $credit_promotional_fee;

        return $this;
    }

    /**
     * Gets annual_percentage_rate
     *
     * @return string|null
     */
    public function getAnnualPercentageRate()
    {
        return $this->container['annual_percentage_rate'];
    }

    /**
     * Sets annual_percentage_rate
     *
     * @param string|null $annual_percentage_rate The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
     *
     * @return self
     */
    public function setAnnualPercentageRate($annual_percentage_rate)
    {
        if (is_null($annual_percentage_rate)) {
            throw new \InvalidArgumentException('non-nullable annual_percentage_rate cannot be null');
        }

        if ((!preg_match("/^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/", $annual_percentage_rate))) {
            throw new \InvalidArgumentException("invalid value for \$annual_percentage_rate when calling TransactionInfo., must conform to the pattern /^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$/.");
        }

        $this->container['annual_percentage_rate'] = $annual_percentage_rate;

        return $this;
    }

    /**
     * Gets payment_method_type
     *
     * @return string|null
     */
    public function getPaymentMethodType()
    {
        return $this->container['payment_method_type'];
    }

    /**
     * Sets payment_method_type
     *
     * @param string|null $payment_method_type The payment method that was used for a transaction. Value is <code>PUI</code>, <code>installment</code>, or <code>mEFT</code>.<blockquote><strong>Note:</strong> Appears only for pay upon invoice (PUI), installment, and mEFT transactions. Merchants and partners in the EMEA region can use this attribute to note transactions that attract turn-over tax.</blockquote>
     *
     * @return self
     */
    public function setPaymentMethodType($payment_method_type)
    {
        if (is_null($payment_method_type)) {
            throw new \InvalidArgumentException('non-nullable payment_method_type cannot be null');
        }
        if ((mb_strlen($payment_method_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $payment_method_type when calling TransactionInfo., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($payment_method_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_method_type when calling TransactionInfo., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9-]*$/", $payment_method_type))) {
            throw new \InvalidArgumentException("invalid value for \$payment_method_type when calling TransactionInfo., must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        $this->container['payment_method_type'] = $payment_method_type;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return string|null
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param string|null $instrument_type A high-level classification of the type of financial instrument that was used to fund a payment. The pattern is not provided because the value is defined by an external party. E.g. PAYPAL, CREDIT_CARD, DEBIT_CARD, APPLE_PAY, BANK , VENMO ,Pay Upon Invoice, Pay Later  or <a href=\"https://developer.paypal.com/docs/checkout/integration-features/alternative-payment-methods/\" title=\"Link to available APM list\">Alternative Payment Methods (APM)</a>.
     *
     * @return self
     */
    public function setInstrumentType($instrument_type)
    {
        if (is_null($instrument_type)) {
            throw new \InvalidArgumentException('non-nullable instrument_type cannot be null');
        }
        if ((mb_strlen($instrument_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $instrument_type when calling TransactionInfo., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($instrument_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $instrument_type when calling TransactionInfo., must be bigger than or equal to 1.');
        }

        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets instrument_sub_type
     *
     * @return string|null
     */
    public function getInstrumentSubType()
    {
        return $this->container['instrument_sub_type'];
    }

    /**
     * Sets instrument_sub_type
     *
     * @param string|null $instrument_sub_type A finer-grained classification of the financial instrument that was used to fund a payment. For example, `Visa card` or a `Mastercard` for a credit card, BANKCARD ,DISCOVER etc. The pattern is not provided because the value is defined by an external party.
     *
     * @return self
     */
    public function setInstrumentSubType($instrument_sub_type)
    {
        if (is_null($instrument_sub_type)) {
            throw new \InvalidArgumentException('non-nullable instrument_sub_type cannot be null');
        }
        if ((mb_strlen($instrument_sub_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $instrument_sub_type when calling TransactionInfo., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($instrument_sub_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $instrument_sub_type when calling TransactionInfo., must be bigger than or equal to 1.');
        }

        $this->container['instrument_sub_type'] = $instrument_sub_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


