<?php
/**
 * ProcessorResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProcessorResponse Class Doc Comment
 *
 * @category Class
 * @description The processor response information for payment requests, such as direct credit card transactions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProcessorResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'processor_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avs_code' => 'string',
        'cvv_code' => 'string',
        'response_code' => 'string',
        'payment_advice_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avs_code' => null,
        'cvv_code' => null,
        'response_code' => null,
        'payment_advice_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'avs_code' => false,
		'cvv_code' => false,
		'response_code' => false,
		'payment_advice_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avs_code' => 'avs_code',
        'cvv_code' => 'cvv_code',
        'response_code' => 'response_code',
        'payment_advice_code' => 'payment_advice_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avs_code' => 'setAvsCode',
        'cvv_code' => 'setCvvCode',
        'response_code' => 'setResponseCode',
        'payment_advice_code' => 'setPaymentAdviceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avs_code' => 'getAvsCode',
        'cvv_code' => 'getCvvCode',
        'response_code' => 'getResponseCode',
        'payment_advice_code' => 'getPaymentAdviceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AVS_CODE_A = 'A';
    public const AVS_CODE_B = 'B';
    public const AVS_CODE_C = 'C';
    public const AVS_CODE_D = 'D';
    public const AVS_CODE_E = 'E';
    public const AVS_CODE_F = 'F';
    public const AVS_CODE_G = 'G';
    public const AVS_CODE_I = 'I';
    public const AVS_CODE_M = 'M';
    public const AVS_CODE_N = 'N';
    public const AVS_CODE_P = 'P';
    public const AVS_CODE_R = 'R';
    public const AVS_CODE_S = 'S';
    public const AVS_CODE_U = 'U';
    public const AVS_CODE_W = 'W';
    public const AVS_CODE_X = 'X';
    public const AVS_CODE_Y = 'Y';
    public const AVS_CODE_Z = 'Z';
    public const AVS_CODE_NULL = 'Null';
    public const AVS_CODE__0 = '0';
    public const AVS_CODE__1 = '1';
    public const AVS_CODE__2 = '2';
    public const AVS_CODE__3 = '3';
    public const AVS_CODE__4 = '4';
    public const CVV_CODE_E = 'E';
    public const CVV_CODE_I = 'I';
    public const CVV_CODE_M = 'M';
    public const CVV_CODE_N = 'N';
    public const CVV_CODE_P = 'P';
    public const CVV_CODE_S = 'S';
    public const CVV_CODE_U = 'U';
    public const CVV_CODE_X = 'X';
    public const CVV_CODE_ALL_OTHERS = 'All others';
    public const CVV_CODE__0 = '0';
    public const CVV_CODE__1 = '1';
    public const CVV_CODE__2 = '2';
    public const CVV_CODE__3 = '3';
    public const CVV_CODE__4 = '4';
    public const RESPONSE_CODE__0000 = '0000';
    public const RESPONSE_CODE__00_N7 = '00N7';
    public const RESPONSE_CODE__0100 = '0100';
    public const RESPONSE_CODE__0390 = '0390';
    public const RESPONSE_CODE__0500 = '0500';
    public const RESPONSE_CODE__0580 = '0580';
    public const RESPONSE_CODE__0800 = '0800';
    public const RESPONSE_CODE__0880 = '0880';
    public const RESPONSE_CODE__0890 = '0890';
    public const RESPONSE_CODE__0960 = '0960';
    public const RESPONSE_CODE__0_R00 = '0R00';
    public const RESPONSE_CODE__1000 = '1000';
    public const RESPONSE_CODE__10_BR = '10BR';
    public const RESPONSE_CODE__1300 = '1300';
    public const RESPONSE_CODE__1310 = '1310';
    public const RESPONSE_CODE__1312 = '1312';
    public const RESPONSE_CODE__1317 = '1317';
    public const RESPONSE_CODE__1320 = '1320';
    public const RESPONSE_CODE__1330 = '1330';
    public const RESPONSE_CODE__1335 = '1335';
    public const RESPONSE_CODE__1340 = '1340';
    public const RESPONSE_CODE__1350 = '1350';
    public const RESPONSE_CODE__1352 = '1352';
    public const RESPONSE_CODE__1360 = '1360';
    public const RESPONSE_CODE__1370 = '1370';
    public const RESPONSE_CODE__1380 = '1380';
    public const RESPONSE_CODE__1382 = '1382';
    public const RESPONSE_CODE__1384 = '1384';
    public const RESPONSE_CODE__1390 = '1390';
    public const RESPONSE_CODE__1393 = '1393';
    public const RESPONSE_CODE__5100 = '5100';
    public const RESPONSE_CODE__5110 = '5110';
    public const RESPONSE_CODE__5120 = '5120';
    public const RESPONSE_CODE__5130 = '5130';
    public const RESPONSE_CODE__5135 = '5135';
    public const RESPONSE_CODE__5140 = '5140';
    public const RESPONSE_CODE__5150 = '5150';
    public const RESPONSE_CODE__5160 = '5160';
    public const RESPONSE_CODE__5170 = '5170';
    public const RESPONSE_CODE__5180 = '5180';
    public const RESPONSE_CODE__5190 = '5190';
    public const RESPONSE_CODE__5200 = '5200';
    public const RESPONSE_CODE__5210 = '5210';
    public const RESPONSE_CODE__5400 = '5400';
    public const RESPONSE_CODE__5500 = '5500';
    public const RESPONSE_CODE__5650 = '5650';
    public const RESPONSE_CODE__5700 = '5700';
    public const RESPONSE_CODE__5710 = '5710';
    public const RESPONSE_CODE__5800 = '5800';
    public const RESPONSE_CODE__5900 = '5900';
    public const RESPONSE_CODE__5910 = '5910';
    public const RESPONSE_CODE__5920 = '5920';
    public const RESPONSE_CODE__5930 = '5930';
    public const RESPONSE_CODE__5950 = '5950';
    public const RESPONSE_CODE__6300 = '6300';
    public const RESPONSE_CODE__7600 = '7600';
    public const RESPONSE_CODE__7700 = '7700';
    public const RESPONSE_CODE__7710 = '7710';
    public const RESPONSE_CODE__7800 = '7800';
    public const RESPONSE_CODE__7900 = '7900';
    public const RESPONSE_CODE__8000 = '8000';
    public const RESPONSE_CODE__8010 = '8010';
    public const RESPONSE_CODE__8020 = '8020';
    public const RESPONSE_CODE__8030 = '8030';
    public const RESPONSE_CODE__8100 = '8100';
    public const RESPONSE_CODE__8110 = '8110';
    public const RESPONSE_CODE__8220 = '8220';
    public const RESPONSE_CODE__9100 = '9100';
    public const RESPONSE_CODE__9500 = '9500';
    public const RESPONSE_CODE__9510 = '9510';
    public const RESPONSE_CODE__9520 = '9520';
    public const RESPONSE_CODE__9530 = '9530';
    public const RESPONSE_CODE__9540 = '9540';
    public const RESPONSE_CODE__9600 = '9600';
    public const RESPONSE_CODE_PCNR = 'PCNR';
    public const RESPONSE_CODE_PCVV = 'PCVV';
    public const RESPONSE_CODE_PP06 = 'PP06';
    public const RESPONSE_CODE_PPRN = 'PPRN';
    public const RESPONSE_CODE_PPAD = 'PPAD';
    public const RESPONSE_CODE_PPAB = 'PPAB';
    public const RESPONSE_CODE_PPAE = 'PPAE';
    public const RESPONSE_CODE_PPAG = 'PPAG';
    public const RESPONSE_CODE_PPAI = 'PPAI';
    public const RESPONSE_CODE_PPAR = 'PPAR';
    public const RESPONSE_CODE_PPAU = 'PPAU';
    public const RESPONSE_CODE_PPAV = 'PPAV';
    public const RESPONSE_CODE_PPAX = 'PPAX';
    public const RESPONSE_CODE_PPBG = 'PPBG';
    public const RESPONSE_CODE_PPC2 = 'PPC2';
    public const RESPONSE_CODE_PPCE = 'PPCE';
    public const RESPONSE_CODE_PPCO = 'PPCO';
    public const RESPONSE_CODE_PPCR = 'PPCR';
    public const RESPONSE_CODE_PPCT = 'PPCT';
    public const RESPONSE_CODE_PPCU = 'PPCU';
    public const RESPONSE_CODE_PPD3 = 'PPD3';
    public const RESPONSE_CODE_PPDC = 'PPDC';
    public const RESPONSE_CODE_PPDI = 'PPDI';
    public const RESPONSE_CODE_PPDV = 'PPDV';
    public const RESPONSE_CODE_PPDT = 'PPDT';
    public const RESPONSE_CODE_PPEF = 'PPEF';
    public const RESPONSE_CODE_PPEL = 'PPEL';
    public const RESPONSE_CODE_PPER = 'PPER';
    public const RESPONSE_CODE_PPEX = 'PPEX';
    public const RESPONSE_CODE_PPFE = 'PPFE';
    public const RESPONSE_CODE_PPFI = 'PPFI';
    public const RESPONSE_CODE_PPFR = 'PPFR';
    public const RESPONSE_CODE_PPFV = 'PPFV';
    public const RESPONSE_CODE_PPGR = 'PPGR';
    public const RESPONSE_CODE_PPH1 = 'PPH1';
    public const RESPONSE_CODE_PPIF = 'PPIF';
    public const RESPONSE_CODE_PPII = 'PPII';
    public const RESPONSE_CODE_PPIM = 'PPIM';
    public const RESPONSE_CODE_PPIT = 'PPIT';
    public const RESPONSE_CODE_PPLR = 'PPLR';
    public const RESPONSE_CODE_PPLS = 'PPLS';
    public const RESPONSE_CODE_PPMB = 'PPMB';
    public const RESPONSE_CODE_PPMC = 'PPMC';
    public const RESPONSE_CODE_PPMD = 'PPMD';
    public const RESPONSE_CODE_PPNC = 'PPNC';
    public const RESPONSE_CODE_PPNL = 'PPNL';
    public const RESPONSE_CODE_PPNM = 'PPNM';
    public const RESPONSE_CODE_PPNT = 'PPNT';
    public const RESPONSE_CODE_PPPH = 'PPPH';
    public const RESPONSE_CODE_PPPI = 'PPPI';
    public const RESPONSE_CODE_PPPM = 'PPPM';
    public const RESPONSE_CODE_PPQC = 'PPQC';
    public const RESPONSE_CODE_PPRE = 'PPRE';
    public const RESPONSE_CODE_PPRF = 'PPRF';
    public const RESPONSE_CODE_PPRR = 'PPRR';
    public const RESPONSE_CODE_PPS0 = 'PPS0';
    public const RESPONSE_CODE_PPS1 = 'PPS1';
    public const RESPONSE_CODE_PPS2 = 'PPS2';
    public const RESPONSE_CODE_PPS3 = 'PPS3';
    public const RESPONSE_CODE_PPS4 = 'PPS4';
    public const RESPONSE_CODE_PPS5 = 'PPS5';
    public const RESPONSE_CODE_PPS6 = 'PPS6';
    public const RESPONSE_CODE_PPSC = 'PPSC';
    public const RESPONSE_CODE_PPSD = 'PPSD';
    public const RESPONSE_CODE_PPSE = 'PPSE';
    public const RESPONSE_CODE_PPTE = 'PPTE';
    public const RESPONSE_CODE_PPTF = 'PPTF';
    public const RESPONSE_CODE_PPTI = 'PPTI';
    public const RESPONSE_CODE_PPTR = 'PPTR';
    public const RESPONSE_CODE_PPTT = 'PPTT';
    public const RESPONSE_CODE_PPTV = 'PPTV';
    public const RESPONSE_CODE_PPUA = 'PPUA';
    public const RESPONSE_CODE_PPUC = 'PPUC';
    public const RESPONSE_CODE_PPUE = 'PPUE';
    public const RESPONSE_CODE_PPUI = 'PPUI';
    public const RESPONSE_CODE_PPUP = 'PPUP';
    public const RESPONSE_CODE_PPUR = 'PPUR';
    public const RESPONSE_CODE_PPVC = 'PPVC';
    public const RESPONSE_CODE_PPVE = 'PPVE';
    public const RESPONSE_CODE_PPVT = 'PPVT';
    public const PAYMENT_ADVICE_CODE__01 = '01';
    public const PAYMENT_ADVICE_CODE__02 = '02';
    public const PAYMENT_ADVICE_CODE__03 = '03';
    public const PAYMENT_ADVICE_CODE__21 = '21';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvsCodeAllowableValues()
    {
        return [
            self::AVS_CODE_A,
            self::AVS_CODE_B,
            self::AVS_CODE_C,
            self::AVS_CODE_D,
            self::AVS_CODE_E,
            self::AVS_CODE_F,
            self::AVS_CODE_G,
            self::AVS_CODE_I,
            self::AVS_CODE_M,
            self::AVS_CODE_N,
            self::AVS_CODE_P,
            self::AVS_CODE_R,
            self::AVS_CODE_S,
            self::AVS_CODE_U,
            self::AVS_CODE_W,
            self::AVS_CODE_X,
            self::AVS_CODE_Y,
            self::AVS_CODE_Z,
            self::AVS_CODE_NULL,
            self::AVS_CODE__0,
            self::AVS_CODE__1,
            self::AVS_CODE__2,
            self::AVS_CODE__3,
            self::AVS_CODE__4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCvvCodeAllowableValues()
    {
        return [
            self::CVV_CODE_E,
            self::CVV_CODE_I,
            self::CVV_CODE_M,
            self::CVV_CODE_N,
            self::CVV_CODE_P,
            self::CVV_CODE_S,
            self::CVV_CODE_U,
            self::CVV_CODE_X,
            self::CVV_CODE_ALL_OTHERS,
            self::CVV_CODE__0,
            self::CVV_CODE__1,
            self::CVV_CODE__2,
            self::CVV_CODE__3,
            self::CVV_CODE__4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseCodeAllowableValues()
    {
        return [
            self::RESPONSE_CODE__0000,
            self::RESPONSE_CODE__00_N7,
            self::RESPONSE_CODE__0100,
            self::RESPONSE_CODE__0390,
            self::RESPONSE_CODE__0500,
            self::RESPONSE_CODE__0580,
            self::RESPONSE_CODE__0800,
            self::RESPONSE_CODE__0880,
            self::RESPONSE_CODE__0890,
            self::RESPONSE_CODE__0960,
            self::RESPONSE_CODE__0_R00,
            self::RESPONSE_CODE__1000,
            self::RESPONSE_CODE__10_BR,
            self::RESPONSE_CODE__1300,
            self::RESPONSE_CODE__1310,
            self::RESPONSE_CODE__1312,
            self::RESPONSE_CODE__1317,
            self::RESPONSE_CODE__1320,
            self::RESPONSE_CODE__1330,
            self::RESPONSE_CODE__1335,
            self::RESPONSE_CODE__1340,
            self::RESPONSE_CODE__1350,
            self::RESPONSE_CODE__1352,
            self::RESPONSE_CODE__1360,
            self::RESPONSE_CODE__1370,
            self::RESPONSE_CODE__1380,
            self::RESPONSE_CODE__1382,
            self::RESPONSE_CODE__1384,
            self::RESPONSE_CODE__1390,
            self::RESPONSE_CODE__1393,
            self::RESPONSE_CODE__5100,
            self::RESPONSE_CODE__5110,
            self::RESPONSE_CODE__5120,
            self::RESPONSE_CODE__5130,
            self::RESPONSE_CODE__5135,
            self::RESPONSE_CODE__5140,
            self::RESPONSE_CODE__5150,
            self::RESPONSE_CODE__5160,
            self::RESPONSE_CODE__5170,
            self::RESPONSE_CODE__5180,
            self::RESPONSE_CODE__5190,
            self::RESPONSE_CODE__5200,
            self::RESPONSE_CODE__5210,
            self::RESPONSE_CODE__5400,
            self::RESPONSE_CODE__5500,
            self::RESPONSE_CODE__5650,
            self::RESPONSE_CODE__5700,
            self::RESPONSE_CODE__5710,
            self::RESPONSE_CODE__5800,
            self::RESPONSE_CODE__5900,
            self::RESPONSE_CODE__5910,
            self::RESPONSE_CODE__5920,
            self::RESPONSE_CODE__5930,
            self::RESPONSE_CODE__5950,
            self::RESPONSE_CODE__6300,
            self::RESPONSE_CODE__7600,
            self::RESPONSE_CODE__7700,
            self::RESPONSE_CODE__7710,
            self::RESPONSE_CODE__7800,
            self::RESPONSE_CODE__7900,
            self::RESPONSE_CODE__8000,
            self::RESPONSE_CODE__8010,
            self::RESPONSE_CODE__8020,
            self::RESPONSE_CODE__8030,
            self::RESPONSE_CODE__8100,
            self::RESPONSE_CODE__8110,
            self::RESPONSE_CODE__8220,
            self::RESPONSE_CODE__9100,
            self::RESPONSE_CODE__9500,
            self::RESPONSE_CODE__9510,
            self::RESPONSE_CODE__9520,
            self::RESPONSE_CODE__9530,
            self::RESPONSE_CODE__9540,
            self::RESPONSE_CODE__9600,
            self::RESPONSE_CODE_PCNR,
            self::RESPONSE_CODE_PCVV,
            self::RESPONSE_CODE_PP06,
            self::RESPONSE_CODE_PPRN,
            self::RESPONSE_CODE_PPAD,
            self::RESPONSE_CODE_PPAB,
            self::RESPONSE_CODE_PPAE,
            self::RESPONSE_CODE_PPAG,
            self::RESPONSE_CODE_PPAI,
            self::RESPONSE_CODE_PPAR,
            self::RESPONSE_CODE_PPAU,
            self::RESPONSE_CODE_PPAV,
            self::RESPONSE_CODE_PPAX,
            self::RESPONSE_CODE_PPBG,
            self::RESPONSE_CODE_PPC2,
            self::RESPONSE_CODE_PPCE,
            self::RESPONSE_CODE_PPCO,
            self::RESPONSE_CODE_PPCR,
            self::RESPONSE_CODE_PPCT,
            self::RESPONSE_CODE_PPCU,
            self::RESPONSE_CODE_PPD3,
            self::RESPONSE_CODE_PPDC,
            self::RESPONSE_CODE_PPDI,
            self::RESPONSE_CODE_PPDV,
            self::RESPONSE_CODE_PPDT,
            self::RESPONSE_CODE_PPEF,
            self::RESPONSE_CODE_PPEL,
            self::RESPONSE_CODE_PPER,
            self::RESPONSE_CODE_PPEX,
            self::RESPONSE_CODE_PPFE,
            self::RESPONSE_CODE_PPFI,
            self::RESPONSE_CODE_PPFR,
            self::RESPONSE_CODE_PPFV,
            self::RESPONSE_CODE_PPGR,
            self::RESPONSE_CODE_PPH1,
            self::RESPONSE_CODE_PPIF,
            self::RESPONSE_CODE_PPII,
            self::RESPONSE_CODE_PPIM,
            self::RESPONSE_CODE_PPIT,
            self::RESPONSE_CODE_PPLR,
            self::RESPONSE_CODE_PPLS,
            self::RESPONSE_CODE_PPMB,
            self::RESPONSE_CODE_PPMC,
            self::RESPONSE_CODE_PPMD,
            self::RESPONSE_CODE_PPNC,
            self::RESPONSE_CODE_PPNL,
            self::RESPONSE_CODE_PPNM,
            self::RESPONSE_CODE_PPNT,
            self::RESPONSE_CODE_PPPH,
            self::RESPONSE_CODE_PPPI,
            self::RESPONSE_CODE_PPPM,
            self::RESPONSE_CODE_PPQC,
            self::RESPONSE_CODE_PPRE,
            self::RESPONSE_CODE_PPRF,
            self::RESPONSE_CODE_PPRR,
            self::RESPONSE_CODE_PPS0,
            self::RESPONSE_CODE_PPS1,
            self::RESPONSE_CODE_PPS2,
            self::RESPONSE_CODE_PPS3,
            self::RESPONSE_CODE_PPS4,
            self::RESPONSE_CODE_PPS5,
            self::RESPONSE_CODE_PPS6,
            self::RESPONSE_CODE_PPSC,
            self::RESPONSE_CODE_PPSD,
            self::RESPONSE_CODE_PPSE,
            self::RESPONSE_CODE_PPTE,
            self::RESPONSE_CODE_PPTF,
            self::RESPONSE_CODE_PPTI,
            self::RESPONSE_CODE_PPTR,
            self::RESPONSE_CODE_PPTT,
            self::RESPONSE_CODE_PPTV,
            self::RESPONSE_CODE_PPUA,
            self::RESPONSE_CODE_PPUC,
            self::RESPONSE_CODE_PPUE,
            self::RESPONSE_CODE_PPUI,
            self::RESPONSE_CODE_PPUP,
            self::RESPONSE_CODE_PPUR,
            self::RESPONSE_CODE_PPVC,
            self::RESPONSE_CODE_PPVE,
            self::RESPONSE_CODE_PPVT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAdviceCodeAllowableValues()
    {
        return [
            self::PAYMENT_ADVICE_CODE__01,
            self::PAYMENT_ADVICE_CODE__02,
            self::PAYMENT_ADVICE_CODE__03,
            self::PAYMENT_ADVICE_CODE__21,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('avs_code', $data ?? [], null);
        $this->setIfExists('cvv_code', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('payment_advice_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAvsCodeAllowableValues();
        if (!is_null($this->container['avs_code']) && !in_array($this->container['avs_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'avs_code', must be one of '%s'",
                $this->container['avs_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCvvCodeAllowableValues();
        if (!is_null($this->container['cvv_code']) && !in_array($this->container['cvv_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cvv_code', must be one of '%s'",
                $this->container['cvv_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseCodeAllowableValues();
        if (!is_null($this->container['response_code']) && !in_array($this->container['response_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response_code', must be one of '%s'",
                $this->container['response_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentAdviceCodeAllowableValues();
        if (!is_null($this->container['payment_advice_code']) && !in_array($this->container['payment_advice_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_advice_code', must be one of '%s'",
                $this->container['payment_advice_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avs_code
     *
     * @return string|null
     */
    public function getAvsCode()
    {
        return $this->container['avs_code'];
    }

    /**
     * Sets avs_code
     *
     * @param string|null $avs_code The address verification code for Visa, Discover, Mastercard, or American Express transactions.
     *
     * @return self
     */
    public function setAvsCode($avs_code)
    {
        if (is_null($avs_code)) {
            throw new \InvalidArgumentException('non-nullable avs_code cannot be null');
        }
        $allowedValues = $this->getAvsCodeAllowableValues();
        if (!in_array($avs_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'avs_code', must be one of '%s'",
                    $avs_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['avs_code'] = $avs_code;

        return $this;
    }

    /**
     * Gets cvv_code
     *
     * @return string|null
     */
    public function getCvvCode()
    {
        return $this->container['cvv_code'];
    }

    /**
     * Sets cvv_code
     *
     * @param string|null $cvv_code The card verification value code for for Visa, Discover, Mastercard, or American Express.
     *
     * @return self
     */
    public function setCvvCode($cvv_code)
    {
        if (is_null($cvv_code)) {
            throw new \InvalidArgumentException('non-nullable cvv_code cannot be null');
        }
        $allowedValues = $this->getCvvCodeAllowableValues();
        if (!in_array($cvv_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cvv_code', must be one of '%s'",
                    $cvv_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cvv_code'] = $cvv_code;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string|null
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string|null $response_code Processor response code for the non-PayPal payment processor errors.
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        $allowedValues = $this->getResponseCodeAllowableValues();
        if (!in_array($response_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response_code', must be one of '%s'",
                    $response_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets payment_advice_code
     *
     * @return string|null
     */
    public function getPaymentAdviceCode()
    {
        return $this->container['payment_advice_code'];
    }

    /**
     * Sets payment_advice_code
     *
     * @param string|null $payment_advice_code The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
     *
     * @return self
     */
    public function setPaymentAdviceCode($payment_advice_code)
    {
        if (is_null($payment_advice_code)) {
            throw new \InvalidArgumentException('non-nullable payment_advice_code cannot be null');
        }
        $allowedValues = $this->getPaymentAdviceCodeAllowableValues();
        if (!in_array($payment_advice_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_advice_code', must be one of '%s'",
                    $payment_advice_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_advice_code'] = $payment_advice_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


