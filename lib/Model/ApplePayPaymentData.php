<?php
/**
 * ApplePayPaymentData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplePayPaymentData Class Doc Comment
 *
 * @category Class
 * @description Information about the decrypted apple pay payment data for the token like cryptogram, eci indicator.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplePayPaymentData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'apple_pay_payment_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cryptogram' => 'string',
        'eci_indicator' => 'string',
        'emv_data' => 'string',
        'pin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cryptogram' => null,
        'eci_indicator' => null,
        'emv_data' => null,
        'pin' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cryptogram' => false,
		'eci_indicator' => false,
		'emv_data' => false,
		'pin' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cryptogram' => 'cryptogram',
        'eci_indicator' => 'eci_indicator',
        'emv_data' => 'emv_data',
        'pin' => 'pin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cryptogram' => 'setCryptogram',
        'eci_indicator' => 'setEciIndicator',
        'emv_data' => 'setEmvData',
        'pin' => 'setPin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cryptogram' => 'getCryptogram',
        'eci_indicator' => 'getEciIndicator',
        'emv_data' => 'getEmvData',
        'pin' => 'getPin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cryptogram', $data ?? [], null);
        $this->setIfExists('eci_indicator', $data ?? [], null);
        $this->setIfExists('emv_data', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cryptogram']) && (mb_strlen($this->container['cryptogram']) > 2000)) {
            $invalidProperties[] = "invalid value for 'cryptogram', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['cryptogram']) && (mb_strlen($this->container['cryptogram']) < 1)) {
            $invalidProperties[] = "invalid value for 'cryptogram', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cryptogram']) && !preg_match("/^.*$/", $this->container['cryptogram'])) {
            $invalidProperties[] = "invalid value for 'cryptogram', must be conform to the pattern /^.*$/.";
        }

        if (!is_null($this->container['eci_indicator']) && (mb_strlen($this->container['eci_indicator']) > 256)) {
            $invalidProperties[] = "invalid value for 'eci_indicator', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['eci_indicator']) && (mb_strlen($this->container['eci_indicator']) < 1)) {
            $invalidProperties[] = "invalid value for 'eci_indicator', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['eci_indicator']) && !preg_match("/^.*$/", $this->container['eci_indicator'])) {
            $invalidProperties[] = "invalid value for 'eci_indicator', must be conform to the pattern /^.*$/.";
        }

        if (!is_null($this->container['emv_data']) && (mb_strlen($this->container['emv_data']) > 2000)) {
            $invalidProperties[] = "invalid value for 'emv_data', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['emv_data']) && (mb_strlen($this->container['emv_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'emv_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emv_data']) && !preg_match("/^.*$/", $this->container['emv_data'])) {
            $invalidProperties[] = "invalid value for 'emv_data', must be conform to the pattern /^.*$/.";
        }

        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) > 2000)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) < 1)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pin']) && !preg_match("/^.*$/", $this->container['pin'])) {
            $invalidProperties[] = "invalid value for 'pin', must be conform to the pattern /^.*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cryptogram
     *
     * @return string|null
     */
    public function getCryptogram()
    {
        return $this->container['cryptogram'];
    }

    /**
     * Sets cryptogram
     *
     * @param string|null $cryptogram Online payment cryptogram, as defined by 3D Secure. The pattern is defined by an external party and supports Unicode.
     *
     * @return self
     */
    public function setCryptogram($cryptogram)
    {
        if (is_null($cryptogram)) {
            throw new \InvalidArgumentException('non-nullable cryptogram cannot be null');
        }
        if ((mb_strlen($cryptogram) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $cryptogram when calling ApplePayPaymentData., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($cryptogram) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cryptogram when calling ApplePayPaymentData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $cryptogram))) {
            throw new \InvalidArgumentException("invalid value for \$cryptogram when calling ApplePayPaymentData., must conform to the pattern /^.*$/.");
        }

        $this->container['cryptogram'] = $cryptogram;

        return $this;
    }

    /**
     * Gets eci_indicator
     *
     * @return string|null
     */
    public function getEciIndicator()
    {
        return $this->container['eci_indicator'];
    }

    /**
     * Sets eci_indicator
     *
     * @param string|null $eci_indicator ECI indicator, as defined by 3- Secure. The pattern is defined by an external party and supports Unicode.
     *
     * @return self
     */
    public function setEciIndicator($eci_indicator)
    {
        if (is_null($eci_indicator)) {
            throw new \InvalidArgumentException('non-nullable eci_indicator cannot be null');
        }
        if ((mb_strlen($eci_indicator) > 256)) {
            throw new \InvalidArgumentException('invalid length for $eci_indicator when calling ApplePayPaymentData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($eci_indicator) < 1)) {
            throw new \InvalidArgumentException('invalid length for $eci_indicator when calling ApplePayPaymentData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $eci_indicator))) {
            throw new \InvalidArgumentException("invalid value for \$eci_indicator when calling ApplePayPaymentData., must conform to the pattern /^.*$/.");
        }

        $this->container['eci_indicator'] = $eci_indicator;

        return $this;
    }

    /**
     * Gets emv_data
     *
     * @return string|null
     */
    public function getEmvData()
    {
        return $this->container['emv_data'];
    }

    /**
     * Sets emv_data
     *
     * @param string|null $emv_data Encoded Apple Pay EMV Payment Structure used for payments in China. The pattern is defined by an external party and supports Unicode.
     *
     * @return self
     */
    public function setEmvData($emv_data)
    {
        if (is_null($emv_data)) {
            throw new \InvalidArgumentException('non-nullable emv_data cannot be null');
        }
        if ((mb_strlen($emv_data) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $emv_data when calling ApplePayPaymentData., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($emv_data) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emv_data when calling ApplePayPaymentData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $emv_data))) {
            throw new \InvalidArgumentException("invalid value for \$emv_data when calling ApplePayPaymentData., must conform to the pattern /^.*$/.");
        }

        $this->container['emv_data'] = $emv_data;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string|null $pin Bank Key encrypted Apple Pay PIN. The pattern is defined by an external party and supports Unicode.
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            throw new \InvalidArgumentException('non-nullable pin cannot be null');
        }
        if ((mb_strlen($pin) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling ApplePayPaymentData., must be smaller than or equal to 2000.');
        }
        if ((mb_strlen($pin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling ApplePayPaymentData., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^.*$/", $pin))) {
            throw new \InvalidArgumentException("invalid value for \$pin when calling ApplePayPaymentData., must conform to the pattern /^.*$/.");
        }

        $this->container['pin'] = $pin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


