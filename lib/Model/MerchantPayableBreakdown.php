<?php
/**
 * MerchantPayableBreakdown
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orders
 *
 * An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.
 *
 * The version of the OpenAPI document: 2.13
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MerchantPayableBreakdown Class Doc Comment
 *
 * @category Class
 * @description The breakdown of the refund.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantPayableBreakdown implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Merchant_Payable_Breakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gross_amount' => '\OpenAPI\Client\Model\Money',
        'paypal_fee' => '\OpenAPI\Client\Model\Money',
        'paypal_fee_in_receivable_currency' => '\OpenAPI\Client\Model\Money',
        'net_amount' => '\OpenAPI\Client\Model\Money',
        'net_amount_in_receivable_currency' => '\OpenAPI\Client\Model\Money',
        'platform_fees' => '\OpenAPI\Client\Model\PlatformFee[]',
        'net_amount_breakdown' => '\OpenAPI\Client\Model\NetAmountBreakdownItem[]',
        'total_refunded_amount' => '\OpenAPI\Client\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gross_amount' => null,
        'paypal_fee' => null,
        'paypal_fee_in_receivable_currency' => null,
        'net_amount' => null,
        'net_amount_in_receivable_currency' => null,
        'platform_fees' => null,
        'net_amount_breakdown' => null,
        'total_refunded_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gross_amount' => false,
		'paypal_fee' => false,
		'paypal_fee_in_receivable_currency' => false,
		'net_amount' => false,
		'net_amount_in_receivable_currency' => false,
		'platform_fees' => false,
		'net_amount_breakdown' => false,
		'total_refunded_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_amount' => 'gross_amount',
        'paypal_fee' => 'paypal_fee',
        'paypal_fee_in_receivable_currency' => 'paypal_fee_in_receivable_currency',
        'net_amount' => 'net_amount',
        'net_amount_in_receivable_currency' => 'net_amount_in_receivable_currency',
        'platform_fees' => 'platform_fees',
        'net_amount_breakdown' => 'net_amount_breakdown',
        'total_refunded_amount' => 'total_refunded_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_amount' => 'setGrossAmount',
        'paypal_fee' => 'setPaypalFee',
        'paypal_fee_in_receivable_currency' => 'setPaypalFeeInReceivableCurrency',
        'net_amount' => 'setNetAmount',
        'net_amount_in_receivable_currency' => 'setNetAmountInReceivableCurrency',
        'platform_fees' => 'setPlatformFees',
        'net_amount_breakdown' => 'setNetAmountBreakdown',
        'total_refunded_amount' => 'setTotalRefundedAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_amount' => 'getGrossAmount',
        'paypal_fee' => 'getPaypalFee',
        'paypal_fee_in_receivable_currency' => 'getPaypalFeeInReceivableCurrency',
        'net_amount' => 'getNetAmount',
        'net_amount_in_receivable_currency' => 'getNetAmountInReceivableCurrency',
        'platform_fees' => 'getPlatformFees',
        'net_amount_breakdown' => 'getNetAmountBreakdown',
        'total_refunded_amount' => 'getTotalRefundedAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('paypal_fee', $data ?? [], null);
        $this->setIfExists('paypal_fee_in_receivable_currency', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('net_amount_in_receivable_currency', $data ?? [], null);
        $this->setIfExists('platform_fees', $data ?? [], null);
        $this->setIfExists('net_amount_breakdown', $data ?? [], null);
        $this->setIfExists('total_refunded_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['platform_fees']) && (count($this->container['platform_fees']) > 1)) {
            $invalidProperties[] = "invalid value for 'platform_fees', number of items must be less than or equal to 1.";
        }

        if (!is_null($this->container['platform_fees']) && (count($this->container['platform_fees']) < 0)) {
            $invalidProperties[] = "invalid value for 'platform_fees', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets paypal_fee
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getPaypalFee()
    {
        return $this->container['paypal_fee'];
    }

    /**
     * Sets paypal_fee
     *
     * @param \OpenAPI\Client\Model\Money|null $paypal_fee paypal_fee
     *
     * @return self
     */
    public function setPaypalFee($paypal_fee)
    {
        if (is_null($paypal_fee)) {
            throw new \InvalidArgumentException('non-nullable paypal_fee cannot be null');
        }
        $this->container['paypal_fee'] = $paypal_fee;

        return $this;
    }

    /**
     * Gets paypal_fee_in_receivable_currency
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getPaypalFeeInReceivableCurrency()
    {
        return $this->container['paypal_fee_in_receivable_currency'];
    }

    /**
     * Sets paypal_fee_in_receivable_currency
     *
     * @param \OpenAPI\Client\Model\Money|null $paypal_fee_in_receivable_currency paypal_fee_in_receivable_currency
     *
     * @return self
     */
    public function setPaypalFeeInReceivableCurrency($paypal_fee_in_receivable_currency)
    {
        if (is_null($paypal_fee_in_receivable_currency)) {
            throw new \InvalidArgumentException('non-nullable paypal_fee_in_receivable_currency cannot be null');
        }
        $this->container['paypal_fee_in_receivable_currency'] = $paypal_fee_in_receivable_currency;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets net_amount_in_receivable_currency
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getNetAmountInReceivableCurrency()
    {
        return $this->container['net_amount_in_receivable_currency'];
    }

    /**
     * Sets net_amount_in_receivable_currency
     *
     * @param \OpenAPI\Client\Model\Money|null $net_amount_in_receivable_currency net_amount_in_receivable_currency
     *
     * @return self
     */
    public function setNetAmountInReceivableCurrency($net_amount_in_receivable_currency)
    {
        if (is_null($net_amount_in_receivable_currency)) {
            throw new \InvalidArgumentException('non-nullable net_amount_in_receivable_currency cannot be null');
        }
        $this->container['net_amount_in_receivable_currency'] = $net_amount_in_receivable_currency;

        return $this;
    }

    /**
     * Gets platform_fees
     *
     * @return \OpenAPI\Client\Model\PlatformFee[]|null
     */
    public function getPlatformFees()
    {
        return $this->container['platform_fees'];
    }

    /**
     * Sets platform_fees
     *
     * @param \OpenAPI\Client\Model\PlatformFee[]|null $platform_fees An array of platform or partner fees, commissions, or brokerage fees for the refund.
     *
     * @return self
     */
    public function setPlatformFees($platform_fees)
    {
        if (is_null($platform_fees)) {
            throw new \InvalidArgumentException('non-nullable platform_fees cannot be null');
        }

        if ((count($platform_fees) > 1)) {
            throw new \InvalidArgumentException('invalid value for $platform_fees when calling MerchantPayableBreakdown., number of items must be less than or equal to 1.');
        }
        if ((count($platform_fees) < 0)) {
            throw new \InvalidArgumentException('invalid length for $platform_fees when calling MerchantPayableBreakdown., number of items must be greater than or equal to 0.');
        }
        $this->container['platform_fees'] = $platform_fees;

        return $this;
    }

    /**
     * Gets net_amount_breakdown
     *
     * @return \OpenAPI\Client\Model\NetAmountBreakdownItem[]|null
     */
    public function getNetAmountBreakdown()
    {
        return $this->container['net_amount_breakdown'];
    }

    /**
     * Sets net_amount_breakdown
     *
     * @param \OpenAPI\Client\Model\NetAmountBreakdownItem[]|null $net_amount_breakdown An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds.
     *
     * @return self
     */
    public function setNetAmountBreakdown($net_amount_breakdown)
    {
        if (is_null($net_amount_breakdown)) {
            throw new \InvalidArgumentException('non-nullable net_amount_breakdown cannot be null');
        }
        $this->container['net_amount_breakdown'] = $net_amount_breakdown;

        return $this;
    }

    /**
     * Gets total_refunded_amount
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getTotalRefundedAmount()
    {
        return $this->container['total_refunded_amount'];
    }

    /**
     * Sets total_refunded_amount
     *
     * @param \OpenAPI\Client\Model\Money|null $total_refunded_amount total_refunded_amount
     *
     * @return self
     */
    public function setTotalRefundedAmount($total_refunded_amount)
    {
        if (is_null($total_refunded_amount)) {
            throw new \InvalidArgumentException('non-nullable total_refunded_amount cannot be null');
        }
        $this->container['total_refunded_amount'] = $total_refunded_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


